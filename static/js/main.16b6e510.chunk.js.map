{"version":3,"sources":["utils/glyphLayout.js","utils/loadFontFile.js","screens/LeaderBoardScreen.js","utils/coordUtils.js","systems/BgRenderSystem.js","systems/BasketRenderSystem.js","systems/InputHandlerGameScreenSystem.js","systems/BasketPositionSystem.js","systems/ProductSpawnSystem.js","systems/ProductPositionSystem.js","systems/ProductRenderSystem.js","systems/BasketCollideSystem.js","systems/ScoreCaculateSystem.js","systems/LifeRenderSystem.js","systems/StarEffectRenderSystem.js","systems/StunScreenSystem.js","systems/WhiteSmokeRenderSystem.js","systems/VitaminARenderSystem.js","systems/ScoreRenderSystem.js","screens/GameScreen.js","utils/getProduct.js","utils/createWorld.js","screens/InstructionScreen2.js","screens/InstructionScreen.js","index.js"],"names":["checkKerning","id1","id2","kerningsData","check","amount","kerning","first","second","GlyphLayour","pageImage","regions","keringsData","canvasWidth","addToCache","line","px","py","lineBreak","lineH","xAdvance","index","length","currChar","charCodeAt","preChar","key","findRegions","kerningAmount","cache","push","x","xoffset","scale","y","yoffset","width","height","xadvance","beforeDrawing","posX","posY","fontSize","CharSequence","preDraw","spaceXadvance","tmpLength","tmplist","i","char","maxSeq","Math","max","newbase","baseLine","listCharSeq","trim","split","map","s","si","oriWidth","tmpRatio","fixedWidth","lineHeight","accumulate","tmpChar","j","key2","substring","id","positionBreak","lastBreakIndex","tmp","key3","getPositionBasedOnMode","lastLine","tmpXadvance","lastKey","type","oriHeight","align","round","setAlignMode","mode","setType","setLineHeight","setFixedGlyphWidth","fixedW","draw","batch","this","base","position","Vector2","newBase","AlignMode","TextType","concatAndResolveUrl","url","concat","url1","url2","url3","l","pop","join","gl","packFileUrl","textureOptions","a","fetch","then","res","text","packFileContent","pages","regionsData","lines","tmp_array","push_to_kerning","numOfPages","startPageLine","tuple","pageCounter","saveIndex","undefined","filter","item","parseInt","face","size","bold","italic","charset","unicode","stretchH","smooth","aa","padding","spacing","outline","scaleW","scaleH","num_of_pages","packed","alphaChnl","redChnl","greenChnl","blueChnl","page_id","file","left","top","page","region","id_page","loadTexture","texture","invTextWidth","invTextHeight","regionData","invTexWidth","invTexHeight","TextureRegion","getLineHeight","getPages","getRegions","setNewText","getHeightBaseOnWidth","textWidth","censorEmail","email","lastChar","slice","numOfDisplay","floor","resultString","charAt","repeat","createLeaderBoardSystem","Game","canvas","viewport","camera","assets","whiteTex","score","font","goToStartScreen","createInstructionScreenSystem","setCurrentScreen","inputHandler","createViewportAwareInputHandler","bg","backGround","atlas","leaderBoard","logo","findRegion","header","footer","yourScore","no1","no2","retry","LOGO_WIDTH","LOGO_HEIGHT","HEADER_WIDTH","HEADER_HEIGHT","FOOTER_WIDTH","FOOTER_HEIGHt","S_WIDTH","S_HIEGHT","NO1_WIDTH","NO1_HEIGHT","NO2_WIDTH","NO2_HEIGHT","BUTTON_WIDTH","BUTTON_HEIGHT","BUTTON_RECTS","medalList","CONTAINER_MARGIN","CONTAINER_WIDTH","CONTAINER_HEIGHT","players","coord","addEventListener","setVector","getTouchedWorldCoord","point","verts","DEVICE_PIXEL_RATIO","minX","maxX","minY","maxY","checkPointInsideRect","numberFont","textFont","userScore","scoreSize","RESULT_START_X","NAME_START_Y","SCORE_START_Y","userNameText","userScoreText","userNameSize","userScoreSize","loopLength","gotData","update","delta","username","setProjection","combined","begin","fillRect","setColor","toString","end","destroy","cleanup","createBackGroundRenderSystem","border","BG_WIDTH","BG_HEIGHT","B_WIDTH","B_HEIGHT","init","worldState","gameAssets","createBasketRenderSystem","basketFront","basketBack","F_HEIGHT","productInfos","collectionPosition","basketState","productInBasketTex","P_WIDTH","P_HEIGHT","image","tex","collection","enable","createInputHandlerGameScreenSystem","worldCoord","target","trayState","createBasketPositionSystem","subVector","nor","speed","distanceSqr","len2","addVector","createProductSpawnSystem","pattern","delayTime","timer","xIndex","productTex","fakeProductTex","difficulty","products","stateTime","minNumber","maxNumber","getShootTypeBaseOnDifficulty","number","random","getPattern","min","loop","tmpIndex","isFake","speedY","getDelayBaseOnDifficulty","createProductPositionSystem","whiteSmokeList","accY","splice","createProductRenderSystem","product","fakeProductInfos","createBasketCollideSystem","life","starList","got","correctCatch","console","log","vitaminACounter","speedX","time","scaleSpeed","accuX","distance","lifeIndex","open","stunScreen","createScoreCalcSystem","extra","createLifeRenderSystem","openEye","closeEye","L_WIDTH","L_HEIGHT","O_HEIGHT","C_HEIGHT","lifeTex","createStarEffectRenderSystem","startTex","S1_WIDTH","S1_HEIGHT","S2_WIDTH","S2_HEIGHT","count","createStunScreenRenderSystem","opacity","createWhiteSmokeRenderSystem","smokeAnimation","SMOKE_WIDTH","SMOKE_HEIGHT","frameLength","effect","smoke","createAnimation","getKeyFrame","createVitaminARenderSystem","V_WIDTH","V_HEIGHT","vitaminTex","createScoreRenderSystem","scoreText","scoreTex","LG_WIDTH","LG_HEIGHT","S_HEIGHT","createGameScreenSystem","BASKET_INITIAL_Y","BASKET_WIDTH","BASKET_BACK_HEIGHT","getFakeProductTex","getProductInBasketTex","gameOver","emptyLife","collectionFinished","world","systems","passiveSystems","addSystem","system","passive","runPassive","createWorld","goToLeaderBoardScreen","createInstructionScreen2System","goToGameScreen","panel2","PANEL_WIDTH","PANEL_HEIGHT","goToInstructionScreen2","panel1","document","getElementById","createViewport","getCamera","getContext","createBatch","createWhiteText","screen","currentScreen","foxLogo","counter","ratio","doAndCount","promise","result","Promise","all","loadAtlas","loadFontFile","clearColor","clear","COLOR_BUFFER_BIT","createGameLoop"],"mappings":"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","file":"static/js/main.16b6e510.chunk.js","sourcesContent":["import { Vector2 } from \"gdxjs\";\r\n\r\nconst checkKerning = (id1, id2, kerningsData) => {\r\n  let check = false;\r\n  let amount = 0;\r\n  for (let kerning of kerningsData) {\r\n    if (kerning.first === id1 && kerning.second === id2) {\r\n      amount = kerning.amount;\r\n      check = true;\r\n      break;\r\n    } else {\r\n      check = false;\r\n    }\r\n  }\r\n  if (check) {\r\n    return amount;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nexport default class GlyphLayour {\r\n  constructor(pageImage, regions, keringsData, canvasWidth) {\r\n    this.pageImage = pageImage;\r\n    this.regions = regions;\r\n    this.kerningsData = keringsData;\r\n    this.canvasWidth = canvasWidth;\r\n    this.type = 0;\r\n    this.align = 2;\r\n    this.lineHeight = pageImage.lineHeight;\r\n    this.baseLine = pageImage.base;\r\n    this.fixedWidth = canvasWidth;\r\n    // temp variable\r\n    this.position = new Vector2(0, 0);\r\n    this.scale = 0;\r\n    this.newBase = 0;\r\n    this.oriWidth = 0;\r\n    this.oriHeight = 0;\r\n    this.positionBreak = []; // list of break-position's index\r\n    this.lastBreakIndex = 0;\r\n    // pre draw\r\n    this.cache = [];\r\n    this.preDraw = true;\r\n  }\r\n  addToCache = (line, px, py, lineBreak, lineH) => {\r\n    let xAdvance = 0;\r\n    for (let index = 0; index < line.length; index++) {\r\n      const currChar = line.charCodeAt(index);\r\n      const preChar = line.charCodeAt(index - 1);\r\n      let key = this.findRegions(currChar);\r\n      let kerningAmount = checkKerning(preChar, currChar, this.kerningsData);\r\n      // let kerningAmount = checkKerning(currChar, preChar, this.kerningsData);\r\n      this.cache.push({\r\n        key: key,\r\n        x:\r\n          px + xAdvance + key.xoffset * this.scale + kerningAmount * this.scale,\r\n        y: py + key.yoffset * this.scale + lineBreak * this.scale + lineH,\r\n        width: key.width * this.scale,\r\n        height: key.height * this.scale,\r\n      });\r\n      xAdvance += key.xadvance * this.scale;\r\n    }\r\n  };\r\n\r\n  beforeDrawing = (posX, posY, fontSize, CharSequence) => {\r\n    if (this.preDraw) {\r\n      let spaceXadvance = 0;\r\n      let tmpLength = 0;\r\n      let tmplist = [];\r\n      // find longest sequence\r\n      for (let i = 0; i < CharSequence.length; i++) {\r\n        const char = CharSequence.charCodeAt(i);\r\n        const key = this.findRegions(char);\r\n        if (char !== 32) {\r\n          tmpLength += key.xadvance * this.scale;\r\n        } else {\r\n          spaceXadvance = key.xadvance * this.scale;\r\n          tmplist.push(tmpLength);\r\n          tmpLength = 0;\r\n        }\r\n      }\r\n      let maxSeq = Math.max(...tmplist) + spaceXadvance;\r\n      //////////////////\r\n      this.newbase = fontSize;\r\n      this.scale = this.newbase / this.baseLine;\r\n      CharSequence = CharSequence.trim();\r\n\r\n      // split string between /n\r\n      let listCharSeq = CharSequence.split(\"/n\").map((s) => s.trim());\r\n      let lineH = 0;\r\n      for (let si = 0; si < listCharSeq.length; si++) {\r\n        CharSequence = listCharSeq[si];\r\n        // find new origin Width for each line\r\n        this.oriWidth = 0;\r\n        for (let i = 0; i < CharSequence.length; i++) {\r\n          const char = CharSequence.charCodeAt(i);\r\n          const preChar = CharSequence.charCodeAt(i - 1);\r\n          const key = this.findRegions(char);\r\n          let kerningAmount = checkKerning(preChar, char, this.kerningsData); // new\r\n          this.oriWidth += kerningAmount * this.scale; // new\r\n          if (i < CharSequence.length - 1) {\r\n            this.oriWidth += key.xadvance * this.scale;\r\n          } else {\r\n            this.oriWidth += key.xadvance * this.scale;\r\n          }\r\n        }\r\n        let tmpRatio = this.oriWidth / this.fixedWidth;\r\n        lineH = this.lineHeight * this.scale * si;\r\n        let accumulate = 0;\r\n        let tmpChar = \"\";\r\n        let lineBreak = 0;\r\n        // finding position break and length of each line\r\n        // only execute if oriWidth > fixedWidth and fixedWidth > longest seq\r\n        if (tmpRatio > 1 && this.fixedWidth > maxSeq) {\r\n          for (let i = 0; i < CharSequence.length; i++) {\r\n            tmpChar += CharSequence[i];\r\n            const char = CharSequence.charCodeAt(i);\r\n            const key = this.findRegions(char);\r\n            accumulate += key.xadvance * this.scale;\r\n            // every line before last line\r\n            if (accumulate >= this.fixedWidth) {\r\n              let j = i;\r\n              while (j >= 0) {\r\n                i--;\r\n                j--;\r\n                const key2 = this.findRegions(CharSequence.charCodeAt(i));\r\n                accumulate -= key2.xadvance * this.scale;\r\n                tmpChar = tmpChar.substring(0, tmpChar.length - 1);\r\n                if (accumulate <= this.fixedWidth && key2.id === 32) {\r\n                  lineBreak = this.lineHeight * this.positionBreak.length;\r\n                  this.positionBreak.push(i); ///\r\n                  this.lastBreakIndex = i;\r\n                  const line = tmpChar.trim();\r\n                  let tmp = 0;\r\n                  let key3 = 0;\r\n\r\n                  for (let index = 0; index < line.length; index++) {\r\n                    key3 = this.findRegions(line.charCodeAt(index));\r\n                    if (index === line.length - 1) {\r\n                      tmp += key3.width * this.scale;\r\n                    } else {\r\n                      tmp += key3.xadvance * this.scale;\r\n                    }\r\n                  }\r\n                  let [px, py] = this.getPositionBasedOnMode(posX, posY, tmp);\r\n\r\n                  this.addToCache(line, px, py, lineBreak, lineH);\r\n\r\n                  accumulate = 0;\r\n                  j = -1;\r\n                  tmpChar = \"\";\r\n                }\r\n              }\r\n            }\r\n            // last line\r\n            if (i === CharSequence.length - 1 && accumulate < this.oriWidth) {\r\n              let tmpChar = \"\";\r\n              for (let j = this.lastBreakIndex; j <= i; j++) {\r\n                tmpChar += CharSequence[j];\r\n              }\r\n              const lastLine = tmpChar.trim();\r\n              let tmpXadvance = 0;\r\n              let lastKey = 0;\r\n              for (let index = 0; index < lastLine.length; index++) {\r\n                lastKey = this.findRegions(lastLine.charCodeAt(index));\r\n                if (index === lastLine.length - 1) {\r\n                  tmpXadvance += lastKey.width * this.scale;\r\n                } else {\r\n                  tmpXadvance += lastKey.xadvance * this.scale;\r\n                }\r\n              }\r\n              let [px, py] = this.getPositionBasedOnMode(\r\n                posX,\r\n                posY,\r\n                tmpXadvance\r\n              );\r\n              lineBreak = this.lineHeight * this.positionBreak.length;\r\n              this.addToCache(lastLine, px, py, lineBreak, lineH);\r\n            }\r\n          }\r\n        }\r\n        // if originWidth < fixedWidth or fixedWidth < longest sequence\r\n        if (tmpRatio <= 1 || this.fixedWidth < maxSeq) {\r\n          let [px, py] = this.getPositionBasedOnMode(posX, posY, this.oriWidth);\r\n          this.addToCache(CharSequence, px, py, 0, lineH);\r\n        }\r\n      }\r\n      if (this.type === 0) {\r\n        this.preDraw = false;\r\n      }\r\n      this.oriHeight = this.newbase;\r\n    }\r\n  };\r\n\r\n  getPositionBasedOnMode = (posX, posY, oriWidth) => {\r\n    if (this.align === 0) {\r\n      // posY -= Math.round(this.oriHeight / 2);\r\n      posX -= Math.round(oriWidth / 2);\r\n    } else if (this.align === 1) {\r\n      posX -= oriWidth;\r\n    }\r\n    return [posX, posY];\r\n  };\r\n\r\n  setAlignMode = (mode) => {\r\n    this.align = mode;\r\n  };\r\n\r\n  setType = (type) => {\r\n    this.type = type;\r\n  };\r\n\r\n  setLineHeight = (lineHeight) => {\r\n    this.lineHeight = lineHeight;\r\n  };\r\n\r\n  setFixedGlyphWidth = (fixedW) => {\r\n    this.fixedWidth = fixedW;\r\n    // this.fixedHeight = fixedH;\r\n  };\r\n\r\n  findRegions = (id) => {\r\n    for (let i = 0; i < this.regions.length; i++) {\r\n      if (this.regions[i].id === id) {\r\n        return this.regions[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (batch, CharSequence = \"\", posX, posY, fontSize = this.baseLine) => {\r\n    if (this.type === 0) {\r\n      if (this.preDraw) {\r\n        this.beforeDrawing(posX, posY, fontSize, CharSequence);\r\n      }\r\n      for (let i = 0; i < this.cache.length; i++) {\r\n        let cache = this.cache[i];\r\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\r\n      }\r\n    }\r\n\r\n    if (this.type === 1) {\r\n      this.beforeDrawing(posX, posY, fontSize, CharSequence);\r\n      for (let i = 0; i < this.cache.length; i++) {\r\n        let cache = this.cache[i];\r\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\r\n      }\r\n      this.cache.length = 0;\r\n      this.positionBreak.length = 0;\r\n    }\r\n  };\r\n}\r\n","import { loadTexture, TextureRegion } from \"gdxjs\";\r\nimport GlyphLayour from \"./glyphLayout\";\r\n\r\nexport const AlignMode = {\r\n  center: 0,\r\n  right: 1,\r\n  left: 2,\r\n};\r\n\r\nexport const TextType = {\r\n  static: 0,\r\n  dynamic: 1,\r\n};\r\n\r\nfunction concatAndResolveUrl(url, concat) {\r\n  let url1 = url.split(\"/\");\r\n  let url2 = concat.split(\"/\");\r\n  let url3 = [];\r\n\r\n  for (let i = 0, l = url1.length; i < l; i++) {\r\n    if (url1[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url1[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url1[i]);\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = url2.length; i < l; i++) {\r\n    if (url2[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url2[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url2[i]);\r\n    }\r\n  }\r\n\r\n  return url3.join(\"/\");\r\n}\r\n\r\nexport default async (gl, packFileUrl, textureOptions) => {\r\n  const packFileContent = await fetch(packFileUrl).then((res) => res.text());\r\n  const pages = [];\r\n  const regionsData = [];\r\n  const kerningsData = [];\r\n  let pageImage = null;\r\n  const lines = packFileContent.split(\"\\n\");\r\n  let i = 0;\r\n  let tuple;\r\n  let tmp_array = [];\r\n  let push_to_kerning = false;\r\n\r\n  let numOfPages = 0;\r\n  let startPageLine = 2;\r\n  while (true) {\r\n    let line = lines[startPageLine];\r\n    tmp_array.length = 0;\r\n    tuple = line.split(\" \").map((s) => s.trim());\r\n    if (tuple[0] === \"page\") {\r\n      numOfPages += 1;\r\n    } else {\r\n      break;\r\n    }\r\n    startPageLine += 1;\r\n  }\r\n\r\n  let pageCounter = -1;\r\n  let saveIndex = 2 + numOfPages + 1; // index to start finding region data\r\n\r\n  while (true) {\r\n    let line = lines[i];\r\n\r\n    if (line === undefined) {\r\n      push_to_kerning = false;\r\n      break;\r\n    }\r\n\r\n    if (line.split(\" \").length === 2) {\r\n      const tmp = line.split(\" \");\r\n      if (tmp[0] === \"kernings\") {\r\n        push_to_kerning = true;\r\n      }\r\n      i++;\r\n      line = lines[i];\r\n    }\r\n\r\n    if (push_to_kerning && pageImage !== null) {\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      tuple = tuple.filter((item) => item !== \"\");\r\n      tmp_array.length = 0;\r\n\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const first = parseInt(tmp_array[0], 10);\r\n      const second = parseInt(tmp_array[1], 10);\r\n      const amount = parseInt(tmp_array[2], 10);\r\n      kerningsData.push({ first, second, amount });\r\n    }\r\n\r\n    if (pageImage === null) {\r\n      pageCounter += 1;\r\n\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const face = tmp_array[0];\r\n      const size = parseInt(tmp_array[1], 10);\r\n      const bold = parseInt(tmp_array[2], 10) === 0 ? false : true;\r\n      const italic = parseInt(tmp_array[3], 10) === 0 ? false : true;\r\n      const charset = tmp_array[4];\r\n      const unicode = parseInt(tmp_array[5], 10);\r\n      const stretchH = parseInt(tmp_array[6], 10); // percentage\r\n      const smooth = parseInt(tmp_array[7], 10);\r\n      const aa = parseInt(tmp_array[8], 10);\r\n      const padding = tmp_array[9].split(\",\").map((i) => parseInt(i, 10));\r\n      const spacing = tmp_array[10].split(\",\").map((i) => parseInt(i, 10));\r\n      const outline = parseInt(tmp_array[11], 10);\r\n\r\n      i++;\r\n      line = lines[i];\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const lineHeight = parseInt(tmp_array[0], 10);\r\n      const base = parseInt(tmp_array[1], 10);\r\n      const scaleW = parseInt(tmp_array[2], 10);\r\n      const scaleH = parseInt(tmp_array[3], 10);\r\n      const num_of_pages = parseInt(tmp_array[4], 10);\r\n      const packed = parseInt(tmp_array[5], 10);\r\n      const alphaChnl = parseInt(tmp_array[6], 10);\r\n      const redChnl = parseInt(tmp_array[7], 10);\r\n      const greenChnl = parseInt(tmp_array[8], 10);\r\n      const blueChnl = parseInt(tmp_array[9], 10);\r\n\r\n      i = i + pageCounter + 1;\r\n      line = lines[i];\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const page_id = parseInt(tmp_array[0], 10);\r\n      const url = tmp_array[1].split('\"');\r\n      const file = concatAndResolveUrl(packFileUrl, `../${url[1]}`);\r\n\r\n      pageImage = {\r\n        file,\r\n        page_id,\r\n        face,\r\n        size,\r\n        bold,\r\n        italic,\r\n        charset,\r\n        unicode,\r\n        stretchH,\r\n        smooth,\r\n        aa,\r\n        padding,\r\n        spacing,\r\n        outline,\r\n        lineHeight,\r\n        base,\r\n        scaleW,\r\n        scaleH,\r\n        num_of_pages,\r\n        packed,\r\n        alphaChnl,\r\n        redChnl,\r\n        greenChnl,\r\n        blueChnl,\r\n      };\r\n      pages.push(pageImage);\r\n\r\n      i = saveIndex;\r\n      line = lines[i];\r\n    }\r\n\r\n    if (!push_to_kerning && pageImage !== null) {\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      tuple = tuple.filter((item) => item !== \"\");\r\n      tmp_array.length = 0;\r\n\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const id = parseInt(tmp_array[0], 10);\r\n      const left = parseInt(tmp_array[1], 10);\r\n      const top = parseInt(tmp_array[2], 10);\r\n      const width = parseInt(tmp_array[3], 10);\r\n      const height = parseInt(tmp_array[4], 10);\r\n      const xoffset = parseInt(tmp_array[5], 10);\r\n      const yoffset = parseInt(tmp_array[6], 10);\r\n      const xadvance = parseInt(tmp_array[7], 10);\r\n      const page = parseInt(tmp_array[8], 10);\r\n      const region = {\r\n        id,\r\n        left,\r\n        top,\r\n        width,\r\n        height,\r\n        xoffset,\r\n        yoffset,\r\n        xadvance,\r\n        page: pageImage,\r\n        id_page: page,\r\n      };\r\n\r\n      if (region.id_page === pageCounter) {\r\n        regionsData.push(region);\r\n      } else {\r\n        if (pageCounter === numOfPages - 1) {\r\n          push_to_kerning = true;\r\n        } else {\r\n          saveIndex = i;\r\n          i = -1;\r\n          pageImage = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    i++;\r\n  }\r\n\r\n  //   console.log(kerningsData);\r\n  //   console.log(pages);\r\n  //   console.log(regionsData);\r\n  for (let page of pages) {\r\n    page.texture = await loadTexture(gl, page.file, textureOptions);\r\n    page.invTextWidth = 1 / page.texture.width;\r\n    page.invTextHeight = 1 / page.texture.height;\r\n  }\r\n\r\n  const regions = [];\r\n\r\n  for (let regionData of regionsData) {\r\n    const left = regionData.left;\r\n    const top = regionData.top;\r\n    const width = regionData.width;\r\n    const height = regionData.height;\r\n    const { texture, invTexWidth, invTexHeight } = regionData.page;\r\n    regions.push(\r\n      new TextureRegion(\r\n        texture,\r\n        left,\r\n        top,\r\n        width,\r\n        height,\r\n        regionData,\r\n        invTexWidth,\r\n        invTexHeight\r\n      )\r\n    );\r\n  }\r\n\r\n  return {\r\n    getLineHeight() {\r\n      return pageImage.lineHeight;\r\n    },\r\n\r\n    getPages() {\r\n      return pages;\r\n    },\r\n\r\n    getRegions() {\r\n      return regions;\r\n    },\r\n\r\n    findRegions(id) {\r\n      for (let i = 0; i < regions.length; i++) {\r\n        if (regions[i].id === id) {\r\n          return regions[i];\r\n        }\r\n      }\r\n    },\r\n\r\n    setNewText(canvasWidth) {\r\n      return new GlyphLayour(pageImage, regions, kerningsData, canvasWidth);\r\n    },\r\n  };\r\n};\r\n","// import axios from \"../../utils/axios\";\r\nimport { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\r\nimport createStartScreenSystem from \"./InstructionScreen\";\r\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\r\nimport createInstructionScreenSystem from \"./InstructionScreen\";\r\n\r\n// import MurmurHash from \"imurmurhash\";\r\n// import analytics from \"../../utils/analytics\";\r\n\r\n// const MAGIC = `blah@gamefox`;\r\n\r\nconst getHeightBaseOnWidth = (texture, textWidth) => {\r\n  return [textWidth, (textWidth * texture.height) / texture.width];\r\n};\r\n\r\nconst censorEmail = (email) => {\r\n  if (email === undefined) {\r\n    return;\r\n  }\r\n  let tmp = email.split(\"@\");\r\n  const nameLimitter = 7;\r\n  const domainLimitter = 6;\r\n  const lastChar = tmp[0].slice(-1);\r\n  if (tmp[0].length > nameLimitter) {\r\n    tmp[0] = tmp[0].slice(0, nameLimitter);\r\n  }\r\n\r\n  if (email.length > 13) {\r\n    if (tmp[1].length > domainLimitter) {\r\n      tmp[1] = tmp[1].slice(0, domainLimitter);\r\n      tmp[1] += \"..\";\r\n    }\r\n  }\r\n\r\n  let numOfDisplay = Math.max(1, Math.floor(tmp[0].length / 3));\r\n  let resultString = \"\";\r\n  for (let i = 0; i < numOfDisplay; i++) {\r\n    resultString += tmp[0].charAt(i);\r\n  }\r\n  return resultString + \"*\".repeat(tmp[0].length - 2) + lastChar + \"@\" + tmp[1];\r\n};\r\n\r\nconst createLeaderBoardSystem = (Game) => {\r\n  const {\r\n    canvas,\r\n    viewport,\r\n    width,\r\n    height,\r\n    camera,\r\n    batch,\r\n    assets,\r\n    score,\r\n    whiteTex,\r\n    font,\r\n  } = Game;\r\n\r\n  const goToStartScreen = async () => {\r\n    Game.setCurrentScreen(await createInstructionScreenSystem(Game));\r\n  };\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const bg = assets.backGround;\r\n  const atlas = assets.leaderBoard;\r\n  const logo = atlas.findRegion(\"logo-2\", -1);\r\n  const header = atlas.findRegion(\"header\", -1);\r\n  const footer = atlas.findRegion(\"footer\", -1);\r\n  const yourScore = atlas.findRegion(\"your-score\", -1);\r\n  const no1 = atlas.findRegion(\"no1\", -1);\r\n  const no2 = atlas.findRegion(\"no2\", -1);\r\n  const retry = atlas.findRegion(\"thu-lai\", -1);\r\n\r\n  const [LOGO_WIDTH, LOGO_HEIGHT] = getHeightBaseOnWidth(logo, width / 4.1);\r\n  const [HEADER_WIDTH, HEADER_HEIGHT] = getHeightBaseOnWidth(header, width / 2);\r\n  const [FOOTER_WIDTH, FOOTER_HEIGHt] = getHeightBaseOnWidth(\r\n    footer,\r\n    width * 0.9\r\n  );\r\n  const [S_WIDTH, S_HIEGHT] = getHeightBaseOnWidth(yourScore, width / 2);\r\n  const [NO1_WIDTH, NO1_HEIGHT] = getHeightBaseOnWidth(no1, width / 8);\r\n  const [NO2_WIDTH, NO2_HEIGHT] = getHeightBaseOnWidth(no2, width / 8);\r\n  const [BUTTON_WIDTH, BUTTON_HEIGHT] = getHeightBaseOnWidth(retry, width / 3);\r\n\r\n  const BUTTON_RECTS = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 2.2) / 3,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT,\r\n  ];\r\n\r\n  const medalList = [\r\n    { texture: no1, width: NO1_WIDTH, height: NO1_HEIGHT },\r\n    { texture: no2, width: NO2_WIDTH, height: NO2_HEIGHT },\r\n  ];\r\n\r\n  const CONTAINER_MARGIN = width / 17;\r\n  const CONTAINER_WIDTH = width - CONTAINER_MARGIN * 2;\r\n  const CONTAINER_HEIGHT = height - CONTAINER_MARGIN * 2;\r\n\r\n  let players = [];\r\n  // const getData = async () => {\r\n  //   try {\r\n  //     analytics.track(\"gameOver\", { score });\r\n  //     const res = await axios.post(\r\n  //       \"/leader-board\",\r\n  //       { score, sig: MurmurHash().hash(`${score};${MAGIC}`).result() },\r\n  //       {\r\n  //         headers: { \"x-access-token\": localStorage.getItem(\"@Token\") },\r\n  //       }\r\n  //     );\r\n  //     players = res.data;\r\n  //   } catch (e) {}\r\n  // };\r\n  // getData();\r\n\r\n  let coord = new Vector2();\r\n  inputHandler.addEventListener(\"touchStart\", () => {\r\n    coord.setVector(inputHandler.getTouchedWorldCoord());\r\n    if (checkPointInsideRect(coord, BUTTON_RECTS)) {\r\n      Game.score = 0;\r\n      goToStartScreen();\r\n    }\r\n  });\r\n\r\n  const { numberFont, textFont } = font;\r\n  const userScore = numberFont.setNewText(width);\r\n  const scoreSize = width / 5.3;\r\n\r\n  const RESULT_START_X = width / 3;\r\n  const NAME_START_Y = (height * 0.62) / 3;\r\n  const SCORE_START_Y = (height * 0.69) / 3;\r\n\r\n  const userNameText = [\r\n    textFont.setNewText(width),\r\n    textFont.setNewText(width),\r\n    textFont.setNewText(width),\r\n  ];\r\n  const userScoreText = [\r\n    numberFont.setNewText(width),\r\n    numberFont.setNewText(width),\r\n    numberFont.setNewText(width),\r\n  ];\r\n  const userNameSize = width / 14;\r\n  const userScoreSize = width / 10;\r\n  let loopLength = 0; // top 3 player ll be display\r\n\r\n  let gotData = false;\r\n  const update = (delta) => {\r\n    if (players.length > 0 && !gotData) {\r\n      // console.log(players);\r\n      gotData = true;\r\n      for (let i = 0; i < players.length; i++) {\r\n        players[i].email = censorEmail(players[i].email);\r\n        players[i].username = players[i].username || \"\";\r\n        players[i].username =\r\n          players[i].username.length > 12\r\n            ? players[i].username.slice(0, 12) + \"..\"\r\n            : players[i].username;\r\n      }\r\n    }\r\n\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    fillRect(batch, bg, 0, 0, width, height);\r\n    batch.setColor(0, 0, 0, 1);\r\n    fillRect(\r\n      batch,\r\n      whiteTex,\r\n      width / 2 - (CONTAINER_WIDTH + width / 100) / 2,\r\n      height / 2 - (CONTAINER_HEIGHT + width / 100) / 2,\r\n      CONTAINER_WIDTH + width / 100,\r\n      CONTAINER_HEIGHT + width / 100\r\n    );\r\n    batch.setColor(255 / 255, 246 / 255, 234 / 255, 1);\r\n    fillRect(\r\n      batch,\r\n      whiteTex,\r\n      width / 2 - CONTAINER_WIDTH / 2,\r\n      height / 2 - CONTAINER_HEIGHT / 2,\r\n      CONTAINER_WIDTH,\r\n      CONTAINER_HEIGHT\r\n    );\r\n    batch.setColor(1, 1, 1, 1);\r\n    logo.draw(batch, (width * 1) / 12, height / 50, LOGO_WIDTH, LOGO_HEIGHT);\r\n    header.draw(\r\n      batch,\r\n      (width * 1.1) / 3,\r\n      height / 25,\r\n      HEADER_WIDTH,\r\n      HEADER_HEIGHT\r\n    );\r\n    yourScore.draw(batch, width / 3, (height * 1.7) / 3, S_WIDTH, S_HIEGHT);\r\n    batch.setColor(0, 0, 0, 1);\r\n    userScore.draw(\r\n      batch,\r\n      `${Game.score}`,\r\n      width / 3,\r\n      (height * 1.79) / 3,\r\n      scoreSize\r\n    );\r\n    batch.setColor(1, 1, 1, 1);\r\n    retry.draw(\r\n      batch,\r\n      BUTTON_RECTS[0],\r\n      BUTTON_RECTS[1],\r\n      BUTTON_RECTS[2],\r\n      BUTTON_RECTS[3]\r\n    );\r\n    footer.draw(\r\n      batch,\r\n      width / 2 - FOOTER_WIDTH / 2,\r\n      height - FOOTER_HEIGHt + height / 200,\r\n      FOOTER_WIDTH,\r\n      FOOTER_HEIGHt\r\n    );\r\n    if (players.length > 0) {\r\n      loopLength = players.length > 3 ? 3 : players.length;\r\n      for (let i = 0; i < loopLength; i++) {\r\n        batch.setColor(0, 0, 0, 1);\r\n        userNameText[i].draw(\r\n          batch,\r\n          players[i].username,\r\n          RESULT_START_X,\r\n          NAME_START_Y + (i * height) / 9,\r\n          userNameSize\r\n        );\r\n        batch.setColor(255 / 255, 115 / 255, 23 / 255, 1);\r\n        userScoreText[i].draw(\r\n          batch,\r\n          players[i].score.toString(),\r\n          RESULT_START_X,\r\n          SCORE_START_Y + (i * height) / 9,\r\n          userScoreSize\r\n        );\r\n        if (i === 0 || i === 1) {\r\n          batch.setColor(1, 1, 1, 1);\r\n          medalList[i].texture.draw(\r\n            batch,\r\n            (width * 0.55) / 3,\r\n            (height * 0.6) / 3 + (height / 8.6) * i,\r\n            medalList[i].width,\r\n            medalList[i].height\r\n          );\r\n        }\r\n      }\r\n    }\r\n    batch.setColor(1, 1, 1, 1);\r\n\r\n    batch.end();\r\n  };\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\nexport default createLeaderBoardSystem;\r\n","export const checkPointInsideRect = (point, verts, DEVICE_PIXEL_RATIO = 1) => {\r\n  const x = point.x * DEVICE_PIXEL_RATIO;\r\n  const y = point.y * DEVICE_PIXEL_RATIO;\r\n  // const minX = Math.min(verts[0], verts[2], verts[4], verts[6]);\r\n  // const maxX = Math.max(verts[0], verts[2], verts[4], verts[6]);\r\n  // const minY = Math.min(verts[1], verts[3], verts[5], verts[7]);\r\n  // const maxY = Math.max(verts[1], verts[3], verts[5], verts[7]);\r\n\r\n  const minX = verts[0];\r\n  const maxX = verts[0] + verts[2];\r\n  const minY = verts[1];\r\n  const maxY = verts[1] + verts[3];\r\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\r\n  return true;\r\n};\r\n","const createBackGroundRenderSystem = () => {\r\n  let bg, border;\r\n  let BG_WIDTH, BG_HEIGHT, B_WIDTH, B_HEIGHT;\r\n\r\n  return {\r\n    init(worldState, { width, height, assets }) {\r\n      let atlas = assets.gameAssets;\r\n\r\n      bg = atlas.findRegion(\"BG\", -1);\r\n      border = atlas.findRegion(\"border\", -1);\r\n\r\n      BG_HEIGHT = height;\r\n      BG_WIDTH = (BG_HEIGHT * bg.width) / bg.height;\r\n\r\n      B_HEIGHT = height;\r\n      B_WIDTH = (B_HEIGHT * border.width) / border.height;\r\n    },\r\n    update(delta, worldState, { batch, width, height, camera }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      bg.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\r\n\r\n      border.draw(batch, 0, 0, B_WIDTH, B_HEIGHT);\r\n      border.draw(batch, width - B_WIDTH, 0, B_WIDTH, B_HEIGHT);\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBackGroundRenderSystem;\r\n","const createBasketRenderSystem = () => {\r\n  let basketFront, basketBack;\r\n  let F_HEIGHT, B_HEIGHT;\r\n  let productInfos = [];\r\n  let collectionPosition = [];\r\n  return {\r\n    init({ basketState }, { width, assets, productInBasketTex }) {\r\n      let atlas = assets.gameAssets;\r\n      basketFront = atlas.findRegion(\"basket_front\", -1);\r\n      basketBack = atlas.findRegion(\"basket_back\", -1);\r\n\r\n      F_HEIGHT = (basketState.width * basketFront.height) / basketFront.width;\r\n      B_HEIGHT = (basketState.width * basketBack.height) / basketBack.width;\r\n\r\n      // collection infos\r\n      const P_WIDTH = width / 8;\r\n\r\n      for (let i = 0; i < productInBasketTex.length; i++) {\r\n        const P_HEIGHT =\r\n          (P_WIDTH * productInBasketTex[i].image.height) /\r\n          productInBasketTex[i].image.width;\r\n\r\n        productInfos.push({\r\n          tex: productInBasketTex[i].image,\r\n          width: P_WIDTH,\r\n          height: P_HEIGHT,\r\n        });\r\n      }\r\n    },\r\n\r\n    update(\r\n      delta,\r\n      { basketState, collection },\r\n      { batch, width, height, camera }\r\n    ) {\r\n      collectionPosition = [\r\n        {\r\n          x: basketState.x - productInfos[0].width * 0.9,\r\n          y: basketState.y - basketState.height * 1.4,\r\n        },\r\n        {\r\n          x: basketState.x - productInfos[1].width * 0.1,\r\n          y: basketState.y - basketState.height * 1.3,\r\n        },\r\n        {\r\n          x: basketState.x - productInfos[2].width * 0.45,\r\n          y: basketState.y - basketState.height * 1.45,\r\n        },\r\n      ];\r\n\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n\r\n      basketBack.draw(\r\n        batch,\r\n        basketState.x - basketState.width / 2,\r\n        basketState.y - B_HEIGHT,\r\n        basketState.width,\r\n        B_HEIGHT\r\n      );\r\n\r\n      // draw collection\r\n      for (let i = collection.length - 1; i >= 0; i--) {\r\n        if (collection[i].enable) {\r\n          productInfos[i].tex.draw(\r\n            batch,\r\n            collectionPosition[i].x,\r\n            collectionPosition[i].y,\r\n            productInfos[i].width,\r\n            productInfos[i].height\r\n          );\r\n        }\r\n      }\r\n\r\n      basketFront.draw(\r\n        batch,\r\n        basketState.x - basketState.width / 2,\r\n        basketState.y - F_HEIGHT,\r\n        basketState.width,\r\n        F_HEIGHT\r\n      );\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBasketRenderSystem;\r\n","import { Vector2 } from \"gdxjs\";\r\n\r\nconst createInputHandlerGameScreenSystem = () => {\r\n  let worldCoord = new Vector2();\r\n\r\n  return {\r\n    init({ basketState }, { inputHandler, width }) {\r\n      inputHandler.addEventListener(\"touchStart\", () => {\r\n        worldCoord.setVector(inputHandler.getTouchedWorldCoord());\r\n        basketState.target.x = worldCoord.x;\r\n      });\r\n\r\n      inputHandler.addEventListener(\"touchMove\", () => {\r\n        worldCoord.setVector(inputHandler.getTouchedWorldCoord());\r\n        basketState.target.x = worldCoord.x;\r\n      });\r\n    },\r\n    update(delta, { trayState }, { inputHandler }) {\r\n      // if (inputHandler.getTouchedWorldCoord()) {\r\n      //   worldCoord.setVector(inputHandler.getTouchedWorldCoord());\r\n      //   trayState.target.x = worldCoord.x;\r\n      // }\r\n    },\r\n  };\r\n};\r\nexport default createInputHandlerGameScreenSystem;\r\n","import { Vector2 } from \"gdxjs\";\r\n\r\nconst createBasketPositionSystem = () => {\r\n  let tmp = new Vector2();\r\n\r\n  return {\r\n    update(delta, { basketState }, { batch, width, height, camera }) {\r\n      tmp\r\n        .setVector(basketState.target)\r\n        .subVector(basketState.position)\r\n        .nor()\r\n        .scale(basketState.speed * delta);\r\n      if (basketState.target.distanceSqr(basketState.position) <= tmp.len2()) {\r\n        basketState.position.setVector(basketState.target);\r\n      } else {\r\n        basketState.position.addVector(tmp);\r\n      }\r\n\r\n      basketState.x = basketState.position.x;\r\n      if (basketState.x <= basketState.width / 2) {\r\n        basketState.x = basketState.width / 2;\r\n      }\r\n      if (basketState.x >= width - basketState.width / 2) {\r\n        basketState.x = width - basketState.width / 2;\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBasketPositionSystem;\r\n","const shuffle = (array) => {\r\n  array.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nconst getDelayBaseOnDifficulty = (difficulty) => {\r\n  if (difficulty >= 1 && difficulty <= 3) {\r\n    return 1;\r\n  } else if (difficulty >= 4 && difficulty <= 6) {\r\n    return 2;\r\n  } else if (difficulty >= 7 && difficulty <= 9) {\r\n    return 1.5;\r\n  } else {\r\n    return 1;\r\n  }\r\n};\r\n\r\nconst getShootTypeBaseOnDifficulty = (difficulty) => {\r\n  if (difficulty >= 1 && difficulty <= 2) {\r\n    return { minNumber: 0, maxNumber: 2 };\r\n  } else if (difficulty >= 3 && difficulty <= 7) {\r\n    return { minNumber: 0, maxNumber: 3 };\r\n  } else {\r\n    return { minNumber: 0, maxNumber: 5 };\r\n  }\r\n};\r\n\r\nconst getPattern = (number, width, height) => {\r\n  let timer = 0;\r\n  let x = [];\r\n\r\n  if (number === 0) {\r\n    timer = [0];\r\n    x = [Math.random() * (width * 0.8 - width * 0.15) + width * 0.15];\r\n  }\r\n\r\n  return { timer, x };\r\n};\r\n\r\nconst createProductSpawnSystem = () => {\r\n  let delayTime = 2;\r\n  let pattern;\r\n  let timer = 0;\r\n  let index = 0;\r\n  let xIndex = 0;\r\n  return {\r\n    update(delta, worldState, { width, height, productTex, fakeProductTex }) {\r\n      const { difficulty, products } = worldState;\r\n\r\n      if (worldState.stateTime > delayTime && pattern === undefined) {\r\n        const { minNumber, maxNumber } = getShootTypeBaseOnDifficulty(\r\n          difficulty\r\n        );\r\n        // pattern = getPattern(\r\n        //   Math.round(Math.random() * (maxNumber - minNumber) + minNumber),\r\n        //   width,\r\n        //   height\r\n        // );\r\n        pattern = getPattern(0, width, height);\r\n        timer = worldState.stateTime + pattern.timer[index];\r\n      }\r\n\r\n      if (\r\n        worldState.stateTime > delayTime &&\r\n        worldState.stateTime > timer &&\r\n        pattern !== undefined\r\n      ) {\r\n        index = Math.min((index += 1), pattern.timer.length);\r\n        timer = worldState.stateTime + pattern.timer[index];\r\n\r\n        // loop to check every same timer products\r\n        let loop = 1;\r\n        let tmpIndex = index - 1;\r\n        while (true) {\r\n          if (\r\n            pattern.timer[tmpIndex] === pattern.timer[tmpIndex + 1] &&\r\n            tmpIndex < pattern.timer.length\r\n          ) {\r\n            tmpIndex = Math.min((tmpIndex += 1), pattern.timer.length);\r\n            loop += 1;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n\r\n        // add to products list\r\n        for (let i = 0; i < loop; i++) {\r\n          if (i > 0) {\r\n            index = Math.min((index += 1), pattern.timer.length);\r\n          }\r\n          timer = worldState.stateTime + pattern.timer[index];\r\n\r\n          // TODO: get random product\r\n          let isFake = true;\r\n          let randomProduct = Math.floor(Math.random() * fakeProductTex.length);\r\n          if (Math.random() > 0.3) {\r\n            isFake = false;\r\n            randomProduct = Math.floor(Math.random() * productTex.length);\r\n          }\r\n\r\n          products.push({\r\n            // type: randomProduct,\r\n            type: 2,\r\n            isFake,\r\n            stateTime: 0,\r\n            x: pattern.x[xIndex],\r\n            y: -height / 8,\r\n            speedY: 0,\r\n          });\r\n\r\n          xIndex = Math.min((xIndex += 1), pattern.x.length - 1);\r\n        }\r\n\r\n        if (index === pattern.timer.length) {\r\n          delayTime =\r\n            worldState.stateTime + getDelayBaseOnDifficulty(difficulty);\r\n          index = 0;\r\n          xIndex = 0;\r\n          pattern = undefined;\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createProductSpawnSystem;\r\n","const createProductPositionSystem = () => {\r\n  return {\r\n    update(delta, { products, productInfos, whiteSmokeList }, { height }) {\r\n      for (let i = products.length - 1; i >= 0; i--) {\r\n        products[i].y += delta * products[i].speedY;\r\n        products[i].speedY += productInfos.accY * delta;\r\n\r\n        if (products[i].y > height * 0.96) {\r\n          whiteSmokeList.push({\r\n            stateTime: 0,\r\n            x: products[i].x,\r\n            y: products[i].y,\r\n          });\r\n          products.splice(i, 1);\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createProductPositionSystem;\r\n","const createProductRenderSystem = () => {\r\n  let P_HEIGHT;\r\n  let productInfos = [];\r\n  let fakeProductInfos = [];\r\n  let product;\r\n  return {\r\n    init(worldState, { width, height, productTex, fakeProductTex }) {\r\n      P_HEIGHT = height / 10;\r\n      for (let i = 0; i < productTex.length; i++) {\r\n        productInfos.push({\r\n          tex: productTex[i].image,\r\n          width:\r\n            (productTex[i].image.width * P_HEIGHT) / productTex[i].image.height,\r\n        });\r\n      }\r\n\r\n      for (let i = 0; i < fakeProductTex.length; i++) {\r\n        fakeProductInfos.push({\r\n          tex: fakeProductTex[i].image,\r\n          width:\r\n            (fakeProductTex[i].image.width * P_HEIGHT) /\r\n            fakeProductTex[i].image.height,\r\n        });\r\n      }\r\n    },\r\n    update(\r\n      delta,\r\n      { products },\r\n      { batch, camera, width, height, productTex, fakeProductTex }\r\n    ) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      for (let i = products.length - 1; i >= 0; i--) {\r\n        product = !products[i].isFake\r\n          ? productInfos[products[i].type]\r\n          : fakeProductInfos[products[i].type];\r\n\r\n        product.tex.draw(\r\n          batch,\r\n          products[i].x - product.width / 2,\r\n          products[i].y - P_HEIGHT,\r\n          product.width,\r\n          P_HEIGHT\r\n        );\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createProductRenderSystem;\r\n","import { Vector2 } from \"gdxjs\";\r\n\r\nconst createBasketCollideSystem = () => {\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      const { basketState, products, collection, life, starList } = worldState;\r\n\r\n      let got = false;\r\n      for (let i = products.length - 1; i >= 0; i--) {\r\n        if (\r\n          products[i].x > basketState.x - basketState.width / 2 &&\r\n          products[i].x < basketState.x + basketState.width / 2 &&\r\n          products[i].y > basketState.y - basketState.height * 0.7 &&\r\n          products[i].y < basketState.y - basketState.height * 0.3\r\n        ) {\r\n          if (!products[i].isFake && !worldState.correctCatch) {\r\n            console.log(\"hit\");\r\n            worldState.correctCatch = true;\r\n            for (let j = 0; j < collection.length; j++) {\r\n              if (\r\n                collection[j].type === products[i].type &&\r\n                !collection[j].enable &&\r\n                !got\r\n              ) {\r\n                got = true;\r\n                collection[j].enable = true;\r\n              }\r\n            }\r\n\r\n            // 0: 1 star --- 1: 3 stars\r\n            if (products[i].type === 2) {\r\n              worldState.vitaminACounter = Math.min(\r\n                5,\r\n                (worldState.vitaminACounter += 1)\r\n              );\r\n\r\n              const time = 0.3;\r\n              const speedX = basketState.width / time;\r\n              const scaleSpeed = (1 - 0) / ((2 / 3) * time);\r\n              starList.push({\r\n                type: 0,\r\n                stateTime: 0,\r\n                time,\r\n                scale: 0,\r\n                scaleSpeed,\r\n                speedX,\r\n                accuX: 0,\r\n                // value\r\n              });\r\n            } else {\r\n              const stateTime = [0, 0, 0];\r\n              const scale = [1, 1, 1];\r\n              const time = [\r\n                Math.random() * (0.4 - 0.3) + 0.3,\r\n                Math.random() * (0.4 - 0.3) + 0.3,\r\n                Math.random() * (0.4 - 0.3) + 0.3,\r\n              ];\r\n              const position = [\r\n                new Vector2(basketState.x, basketState.y - basketState.height),\r\n                new Vector2(basketState.x, basketState.y - basketState.height),\r\n                new Vector2(basketState.x, basketState.y - basketState.height),\r\n              ];\r\n              const target = [\r\n                new Vector2(\r\n                  basketState.x -\r\n                    Math.random() * (width / 3 - width / 7) +\r\n                    width / 7,\r\n                  Math.random() * ((height * 6.5) / 8 - (height * 5) / 8) +\r\n                    (height * 5) / 8\r\n                ),\r\n                new Vector2(\r\n                  basketState.x - Math.random() * (width / 20),\r\n                  Math.random() * ((height * 6.5) / 8 - (height * 5) / 8) +\r\n                    (height * 5) / 8\r\n                ),\r\n                new Vector2(\r\n                  basketState.x +\r\n                    Math.random() * (width / 3 - width / 7) +\r\n                    width / 7,\r\n                  Math.random() * ((height * 6.5) / 8 - (height * 5) / 8) +\r\n                    (height * 5) / 8\r\n                ),\r\n              ];\r\n\r\n              let speed = [];\r\n              let scaleSpeed = [];\r\n              for (let i = 0; i < time.length; i++) {\r\n                speed.push(target[i].distance(position[i]) / time[i]);\r\n                scaleSpeed.push(1 / time[i]);\r\n              }\r\n\r\n              starList.push({\r\n                type: 1,\r\n                time,\r\n                scale,\r\n                stateTime,\r\n                position,\r\n                target,\r\n                speed,\r\n                scaleSpeed,\r\n              });\r\n            }\r\n\r\n            products.splice(i, 1);\r\n            break; // if there is any one match => break the loop\r\n          }\r\n\r\n          //wrong catch\r\n          if (products[i].isFake) {\r\n            console.log(\"miss\");\r\n            life[worldState.lifeIndex].open = false;\r\n            worldState.lifeIndex = Math.max(0, (worldState.lifeIndex -= 1));\r\n            worldState.stunScreen.check = true;\r\n            products.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBasketCollideSystem;\r\n","// import analytics from \"../../../utils/analytics\";\r\n\r\nconst createScoreCalcSystem = () => {\r\n  return {\r\n    update(delta, worldState, extra) {\r\n      if (worldState.correctCatch) {\r\n        worldState.correctCatch = false;\r\n        worldState.score += 100;\r\n        if (worldState.score % 1000 === 0) {\r\n          worldState.difficulty += 1;\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createScoreCalcSystem;\r\n","const createLifeRenderSystem = () => {\r\n  let openEye, closeEye;\r\n  let L_WIDTH, L_HEIGHT;\r\n  let O_HEIGHT, C_HEIGHT;\r\n  return {\r\n    init(worldState, { width, height, assets }) {\r\n      const atlas = assets.gameAssets;\r\n\r\n      openEye = atlas.findRegion(\"open_eye\", -1);\r\n      closeEye = atlas.findRegion(\"close_eye\", -1);\r\n\r\n      L_WIDTH = width / 11;\r\n      O_HEIGHT = (L_WIDTH * openEye.height) / openEye.width;\r\n      C_HEIGHT = (L_WIDTH * closeEye.height) / closeEye.width;\r\n    },\r\n    update(delta, { life }, { batch, camera, width, height }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      for (let i = 0; i < life.length; i++) {\r\n        let lifeTex = closeEye;\r\n        L_HEIGHT = C_HEIGHT;\r\n        if (life[i].open) {\r\n          lifeTex = openEye;\r\n          L_HEIGHT = O_HEIGHT;\r\n        }\r\n        lifeTex.draw(\r\n          batch,\r\n          width / 1.6 + i * (L_WIDTH + width / 50),\r\n          height / 15 - L_HEIGHT / 2,\r\n          L_WIDTH,\r\n          L_HEIGHT\r\n        );\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createLifeRenderSystem;\r\n","import { Vector2 } from \"gdxjs\";\r\n\r\nconst createStarEffectRenderSystem = () => {\r\n  let startTex;\r\n  let S1_WIDTH, S1_HEIGHT, S2_WIDTH, S2_HEIGHT;\r\n  let tmp = new Vector2();\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.gameAssets;\r\n      startTex = atlas.findRegion(\"star\", -1);\r\n\r\n      S1_WIDTH = width / 6;\r\n      S1_HEIGHT = (S1_WIDTH * startTex.height) / startTex.width;\r\n\r\n      S2_WIDTH = width / 6;\r\n      S2_HEIGHT = (S1_WIDTH * startTex.height) / startTex.width;\r\n    },\r\n    update(delta, { starList, basketState }, { batch, camera, width, height }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n\r\n      for (let i = starList.length - 1; i >= 0; i--) {\r\n        if (starList[i].type === 0) {\r\n          starList[i].stateTime += delta;\r\n          starList[i].accuX += delta * starList[i].speedX;\r\n          if (starList[i].accuX < (basketState.width * 2) / 3) {\r\n            starList[i].scale += delta * starList[i].scaleSpeed;\r\n          } else {\r\n            starList[i].scale -= delta * starList[i].scaleSpeed * 1.5;\r\n          }\r\n          startTex.draw(\r\n            batch,\r\n            basketState.x -\r\n              basketState.width / 2 +\r\n              starList[i].accuX -\r\n              S2_WIDTH / 2,\r\n            basketState.y - basketState.height * 0.7 - S2_HEIGHT / 2,\r\n            S2_WIDTH,\r\n            S2_HEIGHT,\r\n            S2_WIDTH / 2,\r\n            S2_HEIGHT / 2,\r\n            0,\r\n            starList[i].scale,\r\n            starList[i].scale\r\n          );\r\n\r\n          if (starList[i].stateTime > starList[i].time) {\r\n            starList.splice(i, 1);\r\n          }\r\n        } else {\r\n          let count = 0;\r\n          for (let j = 2; j >= 0; j--) {\r\n            if (starList[i].stateTime[j] <= starList[i].time[j]) {\r\n              starList[i].stateTime[j] += delta;\r\n              const target = starList[i].target[j];\r\n              const position = starList[i].position[j];\r\n              tmp\r\n                .setVector(target)\r\n                .subVector(position)\r\n                .nor()\r\n                .scale(starList[i].speed[j] * delta);\r\n              if (target.distanceSqr(position) <= tmp.len2()) {\r\n                starList[i].position[j].setVector(starList[i].target[j]);\r\n              } else {\r\n                starList[i].position[j].addVector(tmp);\r\n              }\r\n\r\n              starList[i].scale[j] -= delta * starList[i].scaleSpeed[j];\r\n              startTex.draw(\r\n                batch,\r\n                starList[i].position[j].x - S1_WIDTH / 2,\r\n                starList[i].position[j].y - S1_HEIGHT / 2,\r\n                S1_WIDTH,\r\n                S1_HEIGHT,\r\n                S1_WIDTH / 2,\r\n                S1_HEIGHT / 2,\r\n                0,\r\n                starList[i].scale[j],\r\n                starList[i].scale[j]\r\n              );\r\n            } else {\r\n              count += 1;\r\n            }\r\n          }\r\n          if (count === 3) {\r\n            starList.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createStarEffectRenderSystem;\r\n","import { fillRect } from \"gdxjs\";\r\n\r\nconst createStunScreenRenderSystem = () => {\r\n  return {\r\n    update(delta, { stunScreen }, { width, height, batch, camera, whiteTex }) {\r\n      if (stunScreen.check) {\r\n        batch.setProjection(camera.combined);\r\n        batch.begin();\r\n        batch.setColor(1, 0, 0, stunScreen.opacity);\r\n        fillRect(batch, whiteTex, 0, 0, width, height);\r\n        batch.end();\r\n        stunScreen.opacity -= delta * 4;\r\n        if (stunScreen.opacity <= 0) {\r\n          stunScreen.opacity = 1;\r\n          stunScreen.check = false;\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createStunScreenRenderSystem;\r\n","import { createAnimation } from \"gdxjs\";\r\n\r\nconst createWhiteSmokeRenderSystem = () => {\r\n  let smokeAnimation;\r\n  const duration = 0.05;\r\n  let frameLength = 0;\r\n  let SMOKE_WIDTH, SMOKE_HEIGHT;\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const smokeAtlas = assets.smoke;\r\n      const effect = smokeAtlas.findRegions(\"effect boc khoi\");\r\n      smokeAnimation = createAnimation(duration, effect);\r\n      frameLength = effect.length - 1;\r\n\r\n      SMOKE_WIDTH = width * 0.7;\r\n      SMOKE_HEIGHT = (effect[0].height * SMOKE_WIDTH) / effect[0].width;\r\n    },\r\n    update(delta, { whiteSmokeList }, { batch, camera, width, height }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      for (let i = whiteSmokeList.length - 1; i >= 0; i--) {\r\n        whiteSmokeList[i].stateTime += delta;\r\n        smokeAnimation\r\n          .getKeyFrame(whiteSmokeList[i].stateTime, 1)\r\n          .draw(\r\n            batch,\r\n            whiteSmokeList[i].x - SMOKE_WIDTH / 2.4,\r\n            whiteSmokeList[i].y - SMOKE_HEIGHT / 1.7,\r\n            SMOKE_WIDTH,\r\n            SMOKE_HEIGHT\r\n          );\r\n\r\n        if (whiteSmokeList[i].stateTime > duration * frameLength) {\r\n          whiteSmokeList.splice(i, 1);\r\n        }\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createWhiteSmokeRenderSystem;\r\n","const createVitaminARenderSystem = () => {\r\n  let V_WIDTH, V_HEIGHT, vitaminTex;\r\n  let scale = 1;\r\n  return {\r\n    init(worldState, { productTex, width, height }) {\r\n      vitaminTex = productTex[2].image;\r\n      V_WIDTH = width / 15;\r\n      V_HEIGHT = (V_WIDTH * vitaminTex.height) / vitaminTex.width;\r\n    },\r\n    update(delta, worldState, { batch, camera, width, height }) {\r\n      const { life } = worldState;\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      for (let i = 0; i < worldState.vitaminACounter; i++) {\r\n        vitaminTex.draw(\r\n          batch,\r\n          width * 0.87,\r\n          height / 8.5 + i * (height / 60 + V_HEIGHT),\r\n          V_WIDTH,\r\n          V_HEIGHT,\r\n          V_WIDTH / 2,\r\n          V_HEIGHT / 2,\r\n          0,\r\n          scale,\r\n          scale\r\n        );\r\n      }\r\n      batch.end();\r\n\r\n      if (worldState.vitaminACounter === 5) {\r\n        scale = Math.max((scale -= delta * 5), 0);\r\n        for (let i = 0; i < life.length; i++) {\r\n          if (!life[i].open) {\r\n            if (scale === 0) {\r\n              life[i].open = true;\r\n              worldState.lifeIndex = Math.min((worldState.lifeIndex += 1), 2);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        if (scale === 0) {\r\n          scale = 1;\r\n          worldState.vitaminACounter = 0;\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createVitaminARenderSystem;\r\n","import { AlignMode, TextType } from \"../utils/loadFontFile\";\r\n\r\nconst createScoreRenderSystem = () => {\r\n  let scoreText, logo, scoreTex;\r\n  let LG_WIDTH, LG_HEIGHT, S_WIDTH, S_HEIGHT;\r\n  return {\r\n    init(worldState, { font, width, height, assets }) {\r\n      let atlas = assets.gameAssets;\r\n      logo = atlas.findRegion(\"logo\", -1);\r\n      scoreTex = atlas.findRegion(\"score\", -1);\r\n\r\n      LG_WIDTH = width / 2;\r\n      LG_HEIGHT = (LG_WIDTH * logo.height) / logo.width;\r\n\r\n      S_WIDTH = width / 5;\r\n      S_HEIGHT = (S_WIDTH * scoreTex.height) / scoreTex.width;\r\n\r\n      scoreText = font.setNewText(width);\r\n      scoreText.setAlignMode(AlignMode.left);\r\n      scoreText.setType(TextType.dynamic);\r\n    },\r\n    update(delta, { score }, { batch, camera, width, height }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(0.502, 0.867, 0.216, 1);\r\n      scoreText.draw(batch, `${score}`, width / 3.2, height / 10, width / 9.3);\r\n      batch.setColor(1, 1, 1, 1);\r\n      logo.draw(batch, width / 12, height / 35, LG_WIDTH, LG_HEIGHT);\r\n      scoreTex.draw(batch, width / 12, height / 9, S_WIDTH, S_HEIGHT);\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createScoreRenderSystem;\r\n","// import ReactDOM from \"react-dom\";\r\n// import React from \"react\";\r\n// import LeaderBoard from \"../LeaderBoard\";\r\n// import axios from \"../../utils/axios\";\r\n\r\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\r\nimport createWorld from \"../utils/createWorld\";\r\nimport {\r\n  getProductInBasketTex,\r\n  getProductTexture,\r\n  getFakeProductTex,\r\n} from \"../utils/getProduct\";\r\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\r\nimport createBackGroundRenderSystem from \"../systems/BgRenderSystem\";\r\nimport createBasketRenderSystem from \"../systems/BasketRenderSystem\";\r\nimport createInputHandlerGameScreenSystem from \"../systems/InputHandlerGameScreenSystem\";\r\nimport createBasketPositionSystem from \"../systems/BasketPositionSystem\";\r\nimport createProductSpawnSystem from \"../systems/ProductSpawnSystem\";\r\nimport createProductPositionSystem from \"../systems/ProductPositionSystem\";\r\nimport createProductRenderSystem from \"../systems/ProductRenderSystem\";\r\nimport createBasketCollideSystem from \"../systems/BasketCollideSystem\";\r\nimport createScoreCalcSystem from \"../systems/ScoreCaculateSystem\";\r\nimport createLifeRenderSystem from \"../systems/LifeRenderSystem\";\r\nimport createStarEffectRenderSystem from \"../systems/StarEffectRenderSystem\";\r\nimport createStunScreenRenderSystem from \"../systems/StunScreenSystem\";\r\nimport createWhiteSmokeRenderSystem from \"../systems/WhiteSmokeRenderSystem\";\r\nimport createVitaminARenderSystem from \"../systems/VitaminARenderSystem\";\r\nimport createScoreRenderSystem from \"../systems/ScoreRenderSystem\";\r\n\r\nconst createGameScreenSystem = (Game) => {\r\n  const {\r\n    width,\r\n    height,\r\n    canvas,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    assets,\r\n    viewport,\r\n    font,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n  const BASKET_INITIAL_Y = (height * 3.65) / 4;\r\n\r\n  const basketBack = assets.gameAssets.findRegion(\"basket_back\", -1);\r\n  const BASKET_WIDTH = width / 3.8;\r\n  const BASKET_BACK_HEIGHT =\r\n    (BASKET_WIDTH * basketBack.height) / basketBack.width;\r\n\r\n  const productTex = getProductTexture(assets.gameAssets);\r\n  const fakeProductTex = getFakeProductTex(assets.gameAssets);\r\n  const productInBasketTex = getProductInBasketTex(assets.gameAssets);\r\n\r\n  const worldState = {\r\n    score: 0,\r\n    correctCatch: false,\r\n    stateTime: 0,\r\n    gameOver: false,\r\n    emptyLife: false,\r\n    life: [{ open: true }, { open: true }, { open: true }],\r\n    lifeIndex: 2, // life checking index\r\n    basketState: {\r\n      x: width / 2,\r\n      y: BASKET_INITIAL_Y,\r\n      width: BASKET_WIDTH,\r\n      height: BASKET_BACK_HEIGHT,\r\n      position: new Vector2(width / 2, BASKET_INITIAL_Y),\r\n      target: new Vector2(width / 2, BASKET_INITIAL_Y),\r\n      speed: width * 2.5,\r\n    },\r\n    difficulty: 1,\r\n    collection: [\r\n      { type: 0, enable: false },\r\n      { type: 0, enable: false },\r\n      { type: 1, enable: false },\r\n    ],\r\n    collectionFinished: [],\r\n    products: [],\r\n    productInfos: {\r\n      accY: height / 2,\r\n    },\r\n    starList: [],\r\n    whiteSmokeList: [],\r\n    stunScreen: { check: false, opacity: 1 },\r\n    vitaminACounter: 0,\r\n  };\r\n\r\n  const extra = {\r\n    canvas,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    inputHandler,\r\n    assets,\r\n    productTex,\r\n    fakeProductTex,\r\n    productInBasketTex,\r\n    font,\r\n  };\r\n  const world = createWorld(worldState, extra);\r\n\r\n  world.addSystem(createInputHandlerGameScreenSystem());\r\n  world.addSystem(createBasketPositionSystem());\r\n  world.addSystem(createProductSpawnSystem());\r\n  world.addSystem(createProductPositionSystem());\r\n  world.addSystem(createBasketCollideSystem());\r\n  world.addSystem(createScoreCalcSystem());\r\n\r\n  world.addSystem(createBackGroundRenderSystem());\r\n  world.addSystem(createBasketRenderSystem());\r\n  world.addSystem(createProductRenderSystem());\r\n  world.addSystem(createScoreRenderSystem());\r\n  world.addSystem(createLifeRenderSystem());\r\n  world.addSystem(createVitaminARenderSystem());\r\n  world.addSystem(createStarEffectRenderSystem());\r\n  world.addSystem(createWhiteSmokeRenderSystem());\r\n\r\n  world.addSystem(createStunScreenRenderSystem());\r\n\r\n  const goToLeaderBoardScreen = async () => {\r\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\r\n  };\r\n\r\n  const update = (delta) => {\r\n    if (!worldState.gameOver) {\r\n      worldState.stateTime += delta;\r\n      world.update(delta);\r\n    } else {\r\n      goToLeaderBoardScreen();\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createGameScreenSystem;\r\n","export const getProductInBasketTex = (atlas) => {\r\n  const productTex = [\r\n    {\r\n      image: atlas.findRegion(\"lo_1_gio\", -1),\r\n      type: 0,\r\n    },\r\n    {\r\n      image: atlas.findRegion(\"lo_2_gio\", -1),\r\n      type: 0,\r\n    },\r\n    {\r\n      image: atlas.findRegion(\"hop_thuoc_gio\", -1),\r\n      type: 1,\r\n    },\r\n  ];\r\n  return productTex;\r\n};\r\n\r\nexport const getProductTexture = (atlas) => {\r\n  const productTex = [\r\n    {\r\n      image: atlas.findRegion(\"lo_thuoc\", -1),\r\n      type: 0,\r\n    },\r\n    {\r\n      image: atlas.findRegion(\"hop_thuoc\", -1),\r\n      type: 1,\r\n    },\r\n    {\r\n      image: atlas.findRegion(\"vitaminA\", -1),\r\n      type: 2,\r\n    },\r\n  ];\r\n  return productTex;\r\n};\r\n\r\nexport const getFakeProductTex = (atlas) => {\r\n  const productTex = [\r\n    {\r\n      image: atlas.findRegion(\"lo_thuoc_fake\", -1),\r\n      type: 0,\r\n    },\r\n    {\r\n      image: atlas.findRegion(\"lo_thuoc_fake2\", -1),\r\n      type: 1,\r\n    },\r\n    {\r\n      image: atlas.findRegion(\"hop_thuoc_fake\", -1),\r\n      type: 2,\r\n    },\r\n    {\r\n      image: atlas.findRegion(\"hop_thuoc_fake2\", -1),\r\n      type: 3,\r\n    },\r\n  ];\r\n  return productTex;\r\n};\r\n","export default (worldState, extra) => {\r\n  const systems = [];\r\n  const passiveSystems = [];\r\n  return {\r\n    addSystem(system, passive = false) {\r\n      system.init && system.init(worldState, extra);\r\n      if (passive) {\r\n        systems.push(system);\r\n        passiveSystems.push(system);\r\n      }\r\n      if (!passive) {\r\n        systems.push(system);\r\n      }\r\n    },\r\n    update(delta, runPassive = true) {\r\n      for (let system of systems) {\r\n        system.update(delta, worldState, extra);\r\n      }\r\n      if (runPassive) {\r\n        for (let system of passiveSystems) {\r\n          system.update(delta, worldState, extra);\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n","import { createViewportAwareInputHandler, fillRect } from \"gdxjs\";\r\nimport createGameScreenSystem from \"./GameScreen\";\r\n\r\nconst createInstructionScreen2System = (Game) => {\r\n  const goToGameScreen = async () => {\r\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\r\n  };\r\n\r\n  const {\r\n    canvas,\r\n    viewport,\r\n    width,\r\n    height,\r\n    camera,\r\n    batch,\r\n    assets,\r\n    whiteTex,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.gameAssets;\r\n\r\n  const backGround = atlas.findRegion(\"BG\", -1);\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * backGround.width) / backGround.height;\r\n  const panel2 = atlas.findRegion(\"panel2\", -1);\r\n  const PANEL_WIDTH = width * 0.78;\r\n  const PANEL_HEIGHT = (PANEL_WIDTH * panel2.height) / panel2.width;\r\n  const border = atlas.findRegion(\"border\", -1);\r\n  const B_HEIGHT = height;\r\n  const B_WIDTH = (B_HEIGHT * border.width) / border.height;\r\n\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    goToGameScreen();\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(0.039, 0.988, 0.114, 1);\r\n    fillRect(batch, whiteTex, 0, 0, width, height);\r\n    batch.setColor(1, 1, 1, 1);\r\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\r\n    panel2.draw(\r\n      batch,\r\n      width / 2 - PANEL_WIDTH / 2,\r\n      (height - PANEL_HEIGHT) / 2,\r\n      PANEL_WIDTH,\r\n      PANEL_HEIGHT\r\n    );\r\n    border.draw(batch, 0, 0, B_WIDTH, B_HEIGHT);\r\n    border.draw(batch, width - B_WIDTH, 0, B_WIDTH, B_HEIGHT);\r\n\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreen2System;\r\n","import { createViewportAwareInputHandler, fillRect } from \"gdxjs\";\r\nimport createInstructionScreen2System from \"./InstructionScreen2\";\r\n\r\nconst createInstructionScreenSystem = (Game) => {\r\n  const goToInstructionScreen2 = async () => {\r\n    Game.setCurrentScreen(await createInstructionScreen2System(Game));\r\n  };\r\n\r\n  const {\r\n    canvas,\r\n    viewport,\r\n    width,\r\n    height,\r\n    camera,\r\n    batch,\r\n    assets,\r\n    whiteTex,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.gameAssets;\r\n\r\n  const backGround = atlas.findRegion(\"BG\", -1);\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * backGround.width) / backGround.height;\r\n  const panel1 = atlas.findRegion(\"panel\", -1);\r\n  const PANEL_WIDTH = width * 0.78;\r\n  const PANEL_HEIGHT = (PANEL_WIDTH * panel1.height) / panel1.width;\r\n  const border = atlas.findRegion(\"border\", -1);\r\n  const B_HEIGHT = height;\r\n  const B_WIDTH = (B_HEIGHT * border.width) / border.height;\r\n\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    goToInstructionScreen2();\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(0.039, 0.988, 0.114, 1);\r\n    fillRect(batch, whiteTex, 0, 0, width, height);\r\n    batch.setColor(1, 1, 1, 1);\r\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\r\n    panel1.draw(\r\n      batch,\r\n      width / 2 - PANEL_WIDTH / 2,\r\n      (height - PANEL_HEIGHT) / 2,\r\n      PANEL_WIDTH,\r\n      PANEL_HEIGHT\r\n    );\r\n    border.draw(batch, 0, 0, B_WIDTH, B_HEIGHT);\r\n    border.draw(batch, width - B_WIDTH, 0, B_WIDTH, B_HEIGHT);\r\n\r\n    batch.end();\r\n  };\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreenSystem;\r\n","import \"./index.css\";\nimport {\n  createGameLoop,\n  createBatch,\n  loadTexture,\n  loadAtlas,\n  createViewport,\n  fillRect,\n} from \"gdxjs\";\nimport createWhiteText from \"gl-white-texture\";\nimport loadFontFile from \"./utils/loadFontFile\";\nimport createInstructionScreenSystem from \"./screens/InstructionScreen\";\n\nconst init = async () => {\n  const canvas = document.getElementById(\"main\");\n  const width = 47;\n  const height = 100;\n  const viewport = createViewport(canvas, width, height);\n  const camera = viewport.getCamera();\n  const gl = viewport.getContext();\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteText(gl);\n\n  const Game = {\n    score: 0,\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    viewport,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    },\n  };\n\n  const foxLogo = await loadTexture(gl, \"./assets/logo.png\");\n  const LOGO_WIDTH = width / 1.8;\n  const LOGO_HEIGHT = (LOGO_WIDTH * foxLogo.height) / foxLogo.width;\n\n  let counter = 0;\n  const numOfAssets = 10;\n\n  const draw = () => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(255 / 255, 114 / 255, 22 / 255, 1);\n    fillRect(batch, whiteTex, 0, 0, width, height);\n    batch.setColor(1, 1, 1, 1);\n    fillRect(\n      batch,\n      foxLogo,\n      width / 2 - LOGO_WIDTH / 2,\n      (height * 0.8) / 3,\n      LOGO_WIDTH,\n      LOGO_HEIGHT\n    );\n    batch.setColor(1, 1, 1, 1);\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / (1.45 * 2),\n      (height * 2.5) / 4 - height / 50,\n      width / 1.45,\n      height / 25\n    );\n    batch.setColor(255 / 255, 114 / 255, 22 / 255, 1);\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / 3,\n      (height * 2.5) / 4 - height / 60,\n      width / 1.5,\n      height / 30\n    );\n    batch.setColor(1, 1, 1, 1);\n    let ratio = counter / numOfAssets;\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / (1.55 * 2),\n      (height * 2.5) / 4 - height / 80,\n      (width / 1.55) * ratio,\n      height / 40\n    );\n    batch.end();\n  };\n\n  const doAndCount = (promise) =>\n    promise.then((result) => {\n      // draw();\n      counter += 1;\n      return result;\n    });\n\n  const [gameAssets, smoke] = await Promise.all([\n    doAndCount(loadAtlas(gl, \"./assets/eyemiru.atlas\")),\n    doAndCount(loadAtlas(gl, \"./assets/smoke.atlas\")),\n  ]);\n\n  let assets = {\n    gameAssets,\n    smoke,\n  };\n  Game.assets = assets;\n\n  const font = await loadFontFile(gl, \"./fonts/text.fnt\");\n  Game.font = font;\n  Game.setCurrentScreen(await createInstructionScreenSystem(Game));\n\n  gl.clearColor(1, 1, 1, 1);\n  const update = (delta) => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  createGameLoop(update);\n};\n\ninit();\n"],"sourceRoot":""}