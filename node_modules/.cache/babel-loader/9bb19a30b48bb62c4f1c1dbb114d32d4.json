{"ast":null,"code":"const createBasketRenderSystem = () => {\n  let basketFront, basketBack;\n  let F_HEIGHT, B_HEIGHT;\n  let productInfos = [];\n  let collectionPosition = [];\n  return {\n    init({\n      basketState\n    }, {\n      width,\n      assets,\n      productInBasketTex\n    }) {\n      let atlas = assets.gameAssets;\n      basketFront = atlas.findRegion(\"basket_front\", -1);\n      basketBack = atlas.findRegion(\"basket_back\", -1);\n      F_HEIGHT = basketState.width * basketFront.height / basketFront.width;\n      B_HEIGHT = basketState.width * basketBack.height / basketBack.width; // collection infos\n\n      const P_WIDTH = width / 9;\n\n      for (let i = 0; i < productInBasketTex.length; i++) {\n        const P_HEIGHT = P_WIDTH * productInBasketTex[i].image.height / productInBasketTex[i].image.width;\n        productInfos.push({\n          tex: productInBasketTex[i].image,\n          width: P_WIDTH,\n          height: P_HEIGHT\n        });\n      }\n    },\n\n    update(delta, {\n      basketState,\n      collection\n    }, {\n      batch,\n      width,\n      height,\n      camera\n    }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n      basketBack.draw(batch, basketState.x - basketState.width / 2, basketState.y - B_HEIGHT, basketState.width, B_HEIGHT); // draw collection\n\n      for (let i = 0; i < collection.length; i++) {\n        if (collection[i].enable) {\n          productInfos[i].tex.draw(batch, basketState.x + basketState.width * 0.1, basketState.y - productInfos[i].height, productInfos[i].width, productInfos[i].height);\n        }\n      }\n\n      basketFront.draw(batch, basketState.x - basketState.width / 2, basketState.y - F_HEIGHT, basketState.width, F_HEIGHT);\n      batch.end();\n    }\n\n  };\n};\n\nexport default createBasketRenderSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/systems/BasketRenderSystem.js"],"names":["createBasketRenderSystem","basketFront","basketBack","F_HEIGHT","B_HEIGHT","productInfos","collectionPosition","init","basketState","width","assets","productInBasketTex","atlas","gameAssets","findRegion","height","P_WIDTH","i","length","P_HEIGHT","image","push","tex","update","delta","collection","batch","camera","setProjection","combined","begin","setColor","draw","x","y","enable","end"],"mappings":"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","sourcesContent":["const createBasketRenderSystem = () => {\r\n  let basketFront, basketBack;\r\n  let F_HEIGHT, B_HEIGHT;\r\n  let productInfos = [];\r\n  let collectionPosition = [];\r\n  return {\r\n    init({ basketState }, { width, assets, productInBasketTex }) {\r\n      let atlas = assets.gameAssets;\r\n      basketFront = atlas.findRegion(\"basket_front\", -1);\r\n      basketBack = atlas.findRegion(\"basket_back\", -1);\r\n\r\n      F_HEIGHT = (basketState.width * basketFront.height) / basketFront.width;\r\n      B_HEIGHT = (basketState.width * basketBack.height) / basketBack.width;\r\n\r\n      // collection infos\r\n      const P_WIDTH = width / 9;\r\n\r\n      for (let i = 0; i < productInBasketTex.length; i++) {\r\n        const P_HEIGHT =\r\n          (P_WIDTH * productInBasketTex[i].image.height) /\r\n          productInBasketTex[i].image.width;\r\n\r\n        productInfos.push({\r\n          tex: productInBasketTex[i].image,\r\n          width: P_WIDTH,\r\n          height: P_HEIGHT,\r\n        });\r\n      }\r\n    },\r\n\r\n    update(\r\n      delta,\r\n      { basketState, collection },\r\n      { batch, width, height, camera }\r\n    ) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n\r\n      basketBack.draw(\r\n        batch,\r\n        basketState.x - basketState.width / 2,\r\n        basketState.y - B_HEIGHT,\r\n        basketState.width,\r\n        B_HEIGHT\r\n      );\r\n\r\n      // draw collection\r\n      for (let i = 0; i < collection.length; i++) {\r\n        if (collection[i].enable) {\r\n          productInfos[i].tex.draw(\r\n            batch,\r\n            basketState.x + basketState.width * 0.1,\r\n            basketState.y - productInfos[i].height,\r\n            productInfos[i].width,\r\n            productInfos[i].height\r\n          );\r\n        }\r\n      }\r\n\r\n      basketFront.draw(\r\n        batch,\r\n        basketState.x - basketState.width / 2,\r\n        basketState.y - F_HEIGHT,\r\n        basketState.width,\r\n        F_HEIGHT\r\n      );\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBasketRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}