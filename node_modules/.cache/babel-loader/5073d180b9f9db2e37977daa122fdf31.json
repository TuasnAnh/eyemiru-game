{"ast":null,"code":"import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\nimport createGameScreenSystem from \"./GameScreen\";\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\n\nconst createInstructionScreen2System = Game => {\n  const goToGameScreen = async () => {\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\n  };\n\n  const {\n    canvas,\n    viewport,\n    width,\n    height,\n    camera,\n    batch,\n    assets\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const atlas = assets.startScreen;\n  const bg = assets.backGround; // const button = atlas.findRegion(\"button-play\", -1);\n  // const banner1 = atlas.findRegion(\"hung_nguyen_lieu_de_ghi_diem\", -1);\n  // const banner2 = atlas.findRegion(\n  //   \"ne_cac_nguyen_lieu_khong_co_trong_menu\",\n  //   -1\n  // );\n  // const B1_WIDTH = width * 0.9;\n  // const B1_HEIGHT = (B1_WIDTH * banner1.height) / banner1.width;\n  // const B2_WIDTH = width * 0.9;\n  // const B2_HEIGHT = (B2_WIDTH * banner2.height) / banner2.width;\n  // const BUTTON_WIDTH = width / 3.5;\n  // const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\n  // const buttonInfos = [\n  //   width / 2 - BUTTON_WIDTH / 2,\n  //   (height * 2.6) / 3,\n  //   BUTTON_WIDTH,\n  //   BUTTON_HEIGHT,\n  // ];\n\n  const coord = new Vector2();\n  let point;\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\n    coord.setVector(inputHandler.getTouchedWorldCoord());\n    point = {\n      x: coord.x,\n      y: coord.y\n    };\n    goToGameScreen();\n  });\n\n  const update = delta => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(1, 1, 1, 1);\n    batch.end();\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createInstructionScreen2System;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/InstructionScreen2.js"],"names":["createViewportAwareInputHandler","fillRect","Vector2","createGameScreenSystem","checkPointInsideRect","createInstructionScreen2System","Game","goToGameScreen","setCurrentScreen","canvas","viewport","width","height","camera","batch","assets","inputHandler","atlas","startScreen","bg","backGround","coord","point","addEventListener","x","y","setVector","getTouchedWorldCoord","update","delta","setProjection","combined","begin","setColor","end","destroy","cleanup"],"mappings":"AAAA,SAASA,+BAAT,EAA0CC,QAA1C,EAAoDC,OAApD,QAAmE,OAAnE;AACA,OAAOC,sBAAP,MAAmC,cAAnC;AACA,SAASC,oBAAT,QAAqC,qBAArC;;AAEA,MAAMC,8BAA8B,GAAIC,IAAD,IAAU;AAC/C,QAAMC,cAAc,GAAG,YAAY;AACjCD,IAAAA,IAAI,CAACE,gBAAL,CAAsB,MAAML,sBAAsB,CAACG,IAAD,CAAlD;AACD,GAFD;;AAIA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA,MAA3B;AAAmCC,IAAAA,MAAnC;AAA2CC,IAAAA,KAA3C;AAAkDC,IAAAA;AAAlD,MAA6DT,IAAnE;AAEA,QAAMU,YAAY,GAAGhB,+BAA+B,CAACS,MAAD,EAASC,QAAT,CAApD;AAEA,QAAMO,KAAK,GAAGF,MAAM,CAACG,WAArB;AACA,QAAMC,EAAE,GAAGJ,MAAM,CAACK,UAAlB,CAV+C,CAY/C;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,KAAK,GAAG,IAAInB,OAAJ,EAAd;AACA,MAAIoB,KAAJ;AACAN,EAAAA,YAAY,CAACO,gBAAb,CAA8B,YAA9B,EAA4C,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpDJ,IAAAA,KAAK,CAACK,SAAN,CAAgBV,YAAY,CAACW,oBAAb,EAAhB;AACAL,IAAAA,KAAK,GAAG;AAAEE,MAAAA,CAAC,EAAEH,KAAK,CAACG,CAAX;AAAcC,MAAAA,CAAC,EAAEJ,KAAK,CAACI;AAAvB,KAAR;AACAlB,IAAAA,cAAc;AACf,GAJD;;AAMA,QAAMqB,MAAM,GAAIC,KAAD,IAAW;AACxBf,IAAAA,KAAK,CAACgB,aAAN,CAAoBjB,MAAM,CAACkB,QAA3B;AACAjB,IAAAA,KAAK,CAACkB,KAAN;AACAlB,IAAAA,KAAK,CAACmB,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACAnB,IAAAA,KAAK,CAACoB,GAAN;AACD,GALD;;AAOA,SAAO;AACLN,IAAAA,MADK;;AAELO,IAAAA,OAAO,GAAG;AACRnB,MAAAA,YAAY,CAACoB,OAAb;AACD;;AAJI,GAAP;AAMD,CAxDD;;AA0DA,eAAe/B,8BAAf","sourcesContent":["import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\r\nimport createGameScreenSystem from \"./GameScreen\";\r\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\r\n\r\nconst createInstructionScreen2System = (Game) => {\r\n  const goToGameScreen = async () => {\r\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\r\n  };\r\n\r\n  const { canvas, viewport, width, height, camera, batch, assets } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.startScreen;\r\n  const bg = assets.backGround;\r\n\r\n  // const button = atlas.findRegion(\"button-play\", -1);\r\n  // const banner1 = atlas.findRegion(\"hung_nguyen_lieu_de_ghi_diem\", -1);\r\n  // const banner2 = atlas.findRegion(\r\n  //   \"ne_cac_nguyen_lieu_khong_co_trong_menu\",\r\n  //   -1\r\n  // );\r\n\r\n  // const B1_WIDTH = width * 0.9;\r\n  // const B1_HEIGHT = (B1_WIDTH * banner1.height) / banner1.width;\r\n\r\n  // const B2_WIDTH = width * 0.9;\r\n  // const B2_HEIGHT = (B2_WIDTH * banner2.height) / banner2.width;\r\n\r\n  // const BUTTON_WIDTH = width / 3.5;\r\n  // const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n\r\n  // const buttonInfos = [\r\n  //   width / 2 - BUTTON_WIDTH / 2,\r\n  //   (height * 2.6) / 3,\r\n  //   BUTTON_WIDTH,\r\n  //   BUTTON_HEIGHT,\r\n  // ];\r\n\r\n  const coord = new Vector2();\r\n  let point;\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    coord.setVector(inputHandler.getTouchedWorldCoord());\r\n    point = { x: coord.x, y: coord.y };\r\n    goToGameScreen();\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreen2System;\r\n"]},"metadata":{},"sourceType":"module"}