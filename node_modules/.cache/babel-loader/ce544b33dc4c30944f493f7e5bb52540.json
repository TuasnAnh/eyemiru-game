{"ast":null,"code":"const createBasketCollideSystem = () => {\n  return {\n    update(delta, worldState, extra) {\n      const {\n        basketState,\n        products,\n        collection,\n        life,\n        starList\n      } = worldState;\n      let got = false;\n\n      for (let i = products.length - 1; i >= 0; i--) {\n        if (products[i].x > basketState.x - basketState.width / 2 && products[i].x < basketState.x + basketState.width / 2 && products[i].y > basketState.y - basketState.height * 0.7 && products[i].y < basketState.y - basketState.height * 0.6) {\n          if (!products[i].isFake && !worldState.correctCatch) {\n            console.log(\"hit\");\n            worldState.correctCatch = true;\n\n            for (let j = 0; j < collection.length; j++) {\n              if (collection[j].type === products[i].type && !collection[j].enable && !got) {\n                got = true;\n                collection[j].enable = true;\n              }\n            }\n\n            if (products[i].type === 2) {\n              starList.push({\n                type: 0 // value\n\n              });\n            } else {\n              starList.push({\n                type: 1 // value\n\n              });\n            }\n\n            products.splice(i, 1);\n            break; // if there is any one match => break the loop\n          } //wrong catch\n\n\n          if (products[i].isFake) {\n            console.log(\"miss\");\n            life[worldState.lifeIndex].open = false;\n            worldState.lifeIndex = Math.max(0, worldState.lifeIndex -= 1);\n            worldState.stunScreen.check = true;\n            products.splice(i, 1);\n          }\n        }\n      }\n    }\n\n  };\n};\n\nexport default createBasketCollideSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/systems/BasketCollideSystem.js"],"names":["createBasketCollideSystem","update","delta","worldState","extra","basketState","products","collection","life","starList","got","i","length","x","width","y","height","isFake","correctCatch","console","log","j","type","enable","push","splice","lifeIndex","open","Math","max","stunScreen","check"],"mappings":"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","sourcesContent":["const createBasketCollideSystem = () => {\r\n  return {\r\n    update(delta, worldState, extra) {\r\n      const { basketState, products, collection, life, starList } = worldState;\r\n\r\n      let got = false;\r\n      for (let i = products.length - 1; i >= 0; i--) {\r\n        if (\r\n          products[i].x > basketState.x - basketState.width / 2 &&\r\n          products[i].x < basketState.x + basketState.width / 2 &&\r\n          products[i].y > basketState.y - basketState.height * 0.7 &&\r\n          products[i].y < basketState.y - basketState.height * 0.6\r\n        ) {\r\n          if (!products[i].isFake && !worldState.correctCatch) {\r\n            console.log(\"hit\");\r\n            worldState.correctCatch = true;\r\n            for (let j = 0; j < collection.length; j++) {\r\n              if (\r\n                collection[j].type === products[i].type &&\r\n                !collection[j].enable &&\r\n                !got\r\n              ) {\r\n                got = true;\r\n                collection[j].enable = true;\r\n              }\r\n            }\r\n\r\n            if (products[i].type === 2) {\r\n              starList.push({\r\n                type: 0,\r\n                // value\r\n              });\r\n            } else {\r\n              starList.push({\r\n                type: 1,\r\n                // value\r\n              });\r\n            }\r\n\r\n            products.splice(i, 1);\r\n            break; // if there is any one match => break the loop\r\n          }\r\n\r\n          //wrong catch\r\n          if (products[i].isFake) {\r\n            console.log(\"miss\");\r\n            life[worldState.lifeIndex].open = false;\r\n            worldState.lifeIndex = Math.max(0, (worldState.lifeIndex -= 1));\r\n            worldState.stunScreen.check = true;\r\n            products.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBasketCollideSystem;\r\n"]},"metadata":{},"sourceType":"module"}