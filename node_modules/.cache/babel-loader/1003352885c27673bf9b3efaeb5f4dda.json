{"ast":null,"code":"import _createForOfIteratorHelper from \"E:\\\\game-project\\\\eyemiru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"E:\\\\game-project\\\\eyemiru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:\\\\game-project\\\\eyemiru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport createOrthoCamera from './orthoCamera';\nimport resizeCanvas from './resizeCanvas';\nvar defaultOptions = {\n  autoUpdate: true,\n  pixelRatio: undefined,\n  crop: true\n};\nexport default (function (canvas, width, height, options) {\n  options = _objectSpread(_objectSpread({}, defaultOptions), options);\n  var gl = canvas.getContext('webgl');\n  var additionalCameras = [];\n  var _options = options,\n      autoUpdate = _options.autoUpdate,\n      pixelRatio = _options.pixelRatio,\n      crop = _options.crop;\n  pixelRatio = pixelRatio || window.devicePixelRatio || 1;\n  var viewportInfo = {\n    pixelRatio: pixelRatio,\n    x: 0,\n    y: 0,\n    width: width,\n    height: height\n  };\n  var resizeHandler;\n\n  var _resizeCanvas = resizeCanvas(canvas, pixelRatio),\n      _resizeCanvas2 = _slicedToArray(_resizeCanvas, 2),\n      vWidth = _resizeCanvas2[0],\n      vHeight = _resizeCanvas2[1];\n\n  var camera = createOrthoCamera(width, height, vWidth, vHeight);\n\n  if (autoUpdate) {\n    resizeHandler = function resizeHandler(e) {\n      viewportObject.update();\n    };\n\n    window.addEventListener('resize', resizeHandler);\n  }\n\n  var viewportObject = {\n    getViewportInfo: function getViewportInfo() {\n      return viewportInfo;\n    },\n    getCamera: function getCamera() {\n      return camera;\n    },\n    addCamera: function addCamera(camera) {\n      additionalCameras.push(camera);\n    },\n    getContext: function getContext() {\n      return gl;\n    },\n    update: function update() {\n      var _resizeCanvas3 = resizeCanvas(canvas, pixelRatio),\n          _resizeCanvas4 = _slicedToArray(_resizeCanvas3, 2),\n          vWidth = _resizeCanvas4[0],\n          vHeight = _resizeCanvas4[1];\n\n      var ratio = width / height;\n      var vRatio = vWidth / vHeight;\n      var displayWidth, displayHeight;\n\n      if (ratio < vRatio) {\n        displayHeight = vHeight;\n        displayWidth = vHeight * ratio;\n      } else {\n        displayWidth = vWidth;\n        displayHeight = vWidth / ratio;\n      }\n\n      var displayX = (vWidth - displayWidth) / 2;\n      var displayY = (vHeight - displayHeight) / 2;\n      viewportInfo.x = displayX;\n      viewportInfo.y = displayY;\n      viewportInfo.width = displayWidth;\n      viewportInfo.height = displayHeight;\n      gl.viewport(displayX, displayY, displayWidth, displayHeight);\n      camera.resize(width, height, displayWidth, displayHeight);\n\n      var _iterator = _createForOfIteratorHelper(additionalCameras),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _camera = _step.value;\n\n          _camera.resize(width, height, displayWidth, displayHeight);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    cleanUp: function cleanUp() {\n      if (resizeHandler) {\n        window.removeEventListener('resize', resizeHandler);\n      }\n    }\n  };\n  autoUpdate && viewportObject.update();\n  return viewportObject;\n});","map":{"version":3,"sources":["E:/game-project/eyemiru/node_modules/gdxjs/lib/createViewport.js"],"names":["createOrthoCamera","resizeCanvas","defaultOptions","autoUpdate","pixelRatio","undefined","crop","canvas","width","height","options","gl","getContext","additionalCameras","window","devicePixelRatio","viewportInfo","x","y","resizeHandler","vWidth","vHeight","camera","e","viewportObject","update","addEventListener","getViewportInfo","getCamera","addCamera","push","ratio","vRatio","displayWidth","displayHeight","displayX","displayY","viewport","resize","cleanUp","removeEventListener"],"mappings":"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","sourcesContent":["import createOrthoCamera from './orthoCamera';\nimport resizeCanvas from './resizeCanvas';\nconst defaultOptions = {\n  autoUpdate: true,\n  pixelRatio: undefined,\n  crop: true\n};\nexport default ((canvas, width, height, options) => {\n  options = { ...defaultOptions,\n    ...options\n  };\n  const gl = canvas.getContext('webgl');\n  const additionalCameras = [];\n  let {\n    autoUpdate,\n    pixelRatio,\n    crop\n  } = options;\n  pixelRatio = pixelRatio || window.devicePixelRatio || 1;\n  const viewportInfo = {\n    pixelRatio,\n    x: 0,\n    y: 0,\n    width,\n    height\n  };\n  let resizeHandler;\n  const [vWidth, vHeight] = resizeCanvas(canvas, pixelRatio);\n  const camera = createOrthoCamera(width, height, vWidth, vHeight);\n\n  if (autoUpdate) {\n    resizeHandler = e => {\n      viewportObject.update();\n    };\n\n    window.addEventListener('resize', resizeHandler);\n  }\n\n  const viewportObject = {\n    getViewportInfo() {\n      return viewportInfo;\n    },\n\n    getCamera() {\n      return camera;\n    },\n\n    addCamera(camera) {\n      additionalCameras.push(camera);\n    },\n\n    getContext() {\n      return gl;\n    },\n\n    update() {\n      let [vWidth, vHeight] = resizeCanvas(canvas, pixelRatio);\n      const ratio = width / height;\n      const vRatio = vWidth / vHeight;\n      let displayWidth, displayHeight;\n\n      if (ratio < vRatio) {\n        displayHeight = vHeight;\n        displayWidth = vHeight * ratio;\n      } else {\n        displayWidth = vWidth;\n        displayHeight = vWidth / ratio;\n      }\n\n      const displayX = (vWidth - displayWidth) / 2;\n      const displayY = (vHeight - displayHeight) / 2;\n      viewportInfo.x = displayX;\n      viewportInfo.y = displayY;\n      viewportInfo.width = displayWidth;\n      viewportInfo.height = displayHeight;\n      gl.viewport(displayX, displayY, displayWidth, displayHeight);\n      camera.resize(width, height, displayWidth, displayHeight);\n\n      for (let camera of additionalCameras) {\n        camera.resize(width, height, displayWidth, displayHeight);\n      }\n    },\n\n    cleanUp() {\n      if (resizeHandler) {\n        window.removeEventListener('resize', resizeHandler);\n      }\n    }\n\n  };\n  autoUpdate && viewportObject.update();\n  return viewportObject;\n});"]},"metadata":{},"sourceType":"module"}