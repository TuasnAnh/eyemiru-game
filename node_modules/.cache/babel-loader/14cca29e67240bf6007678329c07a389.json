{"ast":null,"code":"import { Vector2 } from \"gdxjs\";\n\nconst createStarEffectRenderSystem = () => {\n  let startTex;\n  let S1_WIDTH, S1_HEIGHT;\n  let tmp = new Vector2();\n  return {\n    init(worldState, {\n      assets,\n      width,\n      height\n    }) {\n      const atlas = assets.gameAssets;\n      startTex = atlas.findRegion(\"star\", -1);\n      S1_WIDTH = width / 8;\n      S1_HEIGHT = S1_WIDTH * startTex.height / startTex.width;\n    },\n\n    update(delta, {\n      starList,\n      basketState\n    }, {\n      batch,\n      camera,\n      width,\n      height\n    }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n\n      for (let i = starList.length - 1; i >= 0; i--) {\n        if (starList[i].type === 0) {\n          starList[i].stateTime += delta;\n          starList[i].accuX += delta * starList[i].speedX;\n\n          if (starList[i].accuX < basketState.width * 2 / 3) {\n            starList[i].scale += delta * starList[i].scaleSpeed;\n          } else {\n            starList[i].scale -= delta * starList[i].scaleSpeed * 1.5;\n          }\n\n          startTex.draw(batch, basketState.x - basketState.width / 2 + starList[i].accuX - S1_WIDTH / 2, basketState.y - basketState.height * 0.7 - S1_HEIGHT / 2, S1_WIDTH, S1_HEIGHT, S1_WIDTH / 2, S1_HEIGHT / 2, 0, starList[i].scale, starList[i].scale);\n\n          if (starList[i].stateTime > starList[i].time) {\n            starList.splice(i, 1);\n          }\n        } else {\n          let count = 0;\n\n          for (let j = 2; j >= 0; j--) {\n            if (starList[i].stateTime[j] <= starList[i].time[j]) {\n              starList[i].stateTime[j] += delta;\n              const target = starList[i].target[j];\n              const position = starList[i].position[j];\n              tmp.setVector(target).subVector(position).nor().scale(starList[i].speed[j] * delta);\n\n              if (target.distanceSqr(position) <= tmp.len2()) {\n                starList[i].position[j].setVector(starList[i].target[j]);\n              } else {\n                starList[i].position[j].addVector(tmp);\n              }\n\n              starList[i].scale[j] -= delta * starList[i].scaleSpeed[j];\n              console.log(starList[i].scale[j]);\n              startTex.draw(batch, starList[i].position[j].x - S1_WIDTH / 2, starList[i].position[j].y - S1_HEIGHT / 2, S1_WIDTH, S1_HEIGHT, S1_WIDTH / 2, S1_HEIGHT / 2, 0, starList[i].scale[j], starList[i].scale[j]);\n            } else {\n              count += 1;\n            }\n          }\n\n          if (count === 3) {\n            starList.splice(i, 1);\n          }\n        }\n      }\n\n      batch.end();\n    }\n\n  };\n};\n\nexport default createStarEffectRenderSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/systems/StarEffectRenderSystem.js"],"names":["Vector2","createStarEffectRenderSystem","startTex","S1_WIDTH","S1_HEIGHT","tmp","init","worldState","assets","width","height","atlas","gameAssets","findRegion","update","delta","starList","basketState","batch","camera","setProjection","combined","begin","i","length","type","stateTime","accuX","speedX","scale","scaleSpeed","draw","x","y","time","splice","count","j","target","position","setVector","subVector","nor","speed","distanceSqr","len2","addVector","console","log","end"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;;AAEA,MAAMC,4BAA4B,GAAG,MAAM;AACzC,MAAIC,QAAJ;AACA,MAAIC,QAAJ,EAAcC,SAAd;AACA,MAAIC,GAAG,GAAG,IAAIL,OAAJ,EAAV;AACA,SAAO;AACLM,IAAAA,IAAI,CAACC,UAAD,EAAa;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA;AAAjB,KAAb,EAAwC;AAC1C,YAAMC,KAAK,GAAGH,MAAM,CAACI,UAArB;AACAV,MAAAA,QAAQ,GAAGS,KAAK,CAACE,UAAN,CAAiB,MAAjB,EAAyB,CAAC,CAA1B,CAAX;AAEAV,MAAAA,QAAQ,GAAGM,KAAK,GAAG,CAAnB;AACAL,MAAAA,SAAS,GAAID,QAAQ,GAAGD,QAAQ,CAACQ,MAArB,GAA+BR,QAAQ,CAACO,KAApD;AACD,KAPI;;AAQLK,IAAAA,MAAM,CAACC,KAAD,EAAQ;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAR,EAAmC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBV,MAAAA,KAAjB;AAAwBC,MAAAA;AAAxB,KAAnC,EAAqE;AACzEQ,MAAAA,KAAK,CAACE,aAAN,CAAoBD,MAAM,CAACE,QAA3B;AACAH,MAAAA,KAAK,CAACI,KAAN;;AAEA,WAAK,IAAIC,CAAC,GAAGP,QAAQ,CAACQ,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,IAAI,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;AAC7C,YAAIP,QAAQ,CAACO,CAAD,CAAR,CAAYE,IAAZ,KAAqB,CAAzB,EAA4B;AAC1BT,UAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYG,SAAZ,IAAyBX,KAAzB;AACAC,UAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYI,KAAZ,IAAqBZ,KAAK,GAAGC,QAAQ,CAACO,CAAD,CAAR,CAAYK,MAAzC;;AACA,cAAIZ,QAAQ,CAACO,CAAD,CAAR,CAAYI,KAAZ,GAAqBV,WAAW,CAACR,KAAZ,GAAoB,CAArB,GAA0B,CAAlD,EAAqD;AACnDO,YAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYM,KAAZ,IAAqBd,KAAK,GAAGC,QAAQ,CAACO,CAAD,CAAR,CAAYO,UAAzC;AACD,WAFD,MAEO;AACLd,YAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYM,KAAZ,IAAqBd,KAAK,GAAGC,QAAQ,CAACO,CAAD,CAAR,CAAYO,UAApB,GAAiC,GAAtD;AACD;;AACD5B,UAAAA,QAAQ,CAAC6B,IAAT,CACEb,KADF,EAEED,WAAW,CAACe,CAAZ,GACEf,WAAW,CAACR,KAAZ,GAAoB,CADtB,GAEEO,QAAQ,CAACO,CAAD,CAAR,CAAYI,KAFd,GAGExB,QAAQ,GAAG,CALf,EAMEc,WAAW,CAACgB,CAAZ,GAAgBhB,WAAW,CAACP,MAAZ,GAAqB,GAArC,GAA2CN,SAAS,GAAG,CANzD,EAOED,QAPF,EAQEC,SARF,EASED,QAAQ,GAAG,CATb,EAUEC,SAAS,GAAG,CAVd,EAWE,CAXF,EAYEY,QAAQ,CAACO,CAAD,CAAR,CAAYM,KAZd,EAaEb,QAAQ,CAACO,CAAD,CAAR,CAAYM,KAbd;;AAgBA,cAAIb,QAAQ,CAACO,CAAD,CAAR,CAAYG,SAAZ,GAAwBV,QAAQ,CAACO,CAAD,CAAR,CAAYW,IAAxC,EAA8C;AAC5ClB,YAAAA,QAAQ,CAACmB,MAAT,CAAgBZ,CAAhB,EAAmB,CAAnB;AACD;AACF,SA3BD,MA2BO;AACL,cAAIa,KAAK,GAAG,CAAZ;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,gBAAIrB,QAAQ,CAACO,CAAD,CAAR,CAAYG,SAAZ,CAAsBW,CAAtB,KAA4BrB,QAAQ,CAACO,CAAD,CAAR,CAAYW,IAAZ,CAAiBG,CAAjB,CAAhC,EAAqD;AACnDrB,cAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYG,SAAZ,CAAsBW,CAAtB,KAA4BtB,KAA5B;AACA,oBAAMuB,MAAM,GAAGtB,QAAQ,CAACO,CAAD,CAAR,CAAYe,MAAZ,CAAmBD,CAAnB,CAAf;AACA,oBAAME,QAAQ,GAAGvB,QAAQ,CAACO,CAAD,CAAR,CAAYgB,QAAZ,CAAqBF,CAArB,CAAjB;AACAhC,cAAAA,GAAG,CACAmC,SADH,CACaF,MADb,EAEGG,SAFH,CAEaF,QAFb,EAGGG,GAHH,GAIGb,KAJH,CAISb,QAAQ,CAACO,CAAD,CAAR,CAAYoB,KAAZ,CAAkBN,CAAlB,IAAuBtB,KAJhC;;AAKA,kBAAIuB,MAAM,CAACM,WAAP,CAAmBL,QAAnB,KAAgClC,GAAG,CAACwC,IAAJ,EAApC,EAAgD;AAC9C7B,gBAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYgB,QAAZ,CAAqBF,CAArB,EAAwBG,SAAxB,CAAkCxB,QAAQ,CAACO,CAAD,CAAR,CAAYe,MAAZ,CAAmBD,CAAnB,CAAlC;AACD,eAFD,MAEO;AACLrB,gBAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYgB,QAAZ,CAAqBF,CAArB,EAAwBS,SAAxB,CAAkCzC,GAAlC;AACD;;AAEDW,cAAAA,QAAQ,CAACO,CAAD,CAAR,CAAYM,KAAZ,CAAkBQ,CAAlB,KAAwBtB,KAAK,GAAGC,QAAQ,CAACO,CAAD,CAAR,CAAYO,UAAZ,CAAuBO,CAAvB,CAAhC;AACAU,cAAAA,OAAO,CAACC,GAAR,CAAYhC,QAAQ,CAACO,CAAD,CAAR,CAAYM,KAAZ,CAAkBQ,CAAlB,CAAZ;AACAnC,cAAAA,QAAQ,CAAC6B,IAAT,CACEb,KADF,EAEEF,QAAQ,CAACO,CAAD,CAAR,CAAYgB,QAAZ,CAAqBF,CAArB,EAAwBL,CAAxB,GAA4B7B,QAAQ,GAAG,CAFzC,EAGEa,QAAQ,CAACO,CAAD,CAAR,CAAYgB,QAAZ,CAAqBF,CAArB,EAAwBJ,CAAxB,GAA4B7B,SAAS,GAAG,CAH1C,EAIED,QAJF,EAKEC,SALF,EAMED,QAAQ,GAAG,CANb,EAOEC,SAAS,GAAG,CAPd,EAQE,CARF,EASEY,QAAQ,CAACO,CAAD,CAAR,CAAYM,KAAZ,CAAkBQ,CAAlB,CATF,EAUErB,QAAQ,CAACO,CAAD,CAAR,CAAYM,KAAZ,CAAkBQ,CAAlB,CAVF;AAYD,aA7BD,MA6BO;AACLD,cAAAA,KAAK,IAAI,CAAT;AACD;AACF;;AACD,cAAIA,KAAK,KAAK,CAAd,EAAiB;AACfpB,YAAAA,QAAQ,CAACmB,MAAT,CAAgBZ,CAAhB,EAAmB,CAAnB;AACD;AACF;AACF;;AAEDL,MAAAA,KAAK,CAAC+B,GAAN;AACD;;AAnFI,GAAP;AAqFD,CAzFD;;AA2FA,eAAehD,4BAAf","sourcesContent":["import { Vector2 } from \"gdxjs\";\r\n\r\nconst createStarEffectRenderSystem = () => {\r\n  let startTex;\r\n  let S1_WIDTH, S1_HEIGHT;\r\n  let tmp = new Vector2();\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.gameAssets;\r\n      startTex = atlas.findRegion(\"star\", -1);\r\n\r\n      S1_WIDTH = width / 8;\r\n      S1_HEIGHT = (S1_WIDTH * startTex.height) / startTex.width;\r\n    },\r\n    update(delta, { starList, basketState }, { batch, camera, width, height }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n\r\n      for (let i = starList.length - 1; i >= 0; i--) {\r\n        if (starList[i].type === 0) {\r\n          starList[i].stateTime += delta;\r\n          starList[i].accuX += delta * starList[i].speedX;\r\n          if (starList[i].accuX < (basketState.width * 2) / 3) {\r\n            starList[i].scale += delta * starList[i].scaleSpeed;\r\n          } else {\r\n            starList[i].scale -= delta * starList[i].scaleSpeed * 1.5;\r\n          }\r\n          startTex.draw(\r\n            batch,\r\n            basketState.x -\r\n              basketState.width / 2 +\r\n              starList[i].accuX -\r\n              S1_WIDTH / 2,\r\n            basketState.y - basketState.height * 0.7 - S1_HEIGHT / 2,\r\n            S1_WIDTH,\r\n            S1_HEIGHT,\r\n            S1_WIDTH / 2,\r\n            S1_HEIGHT / 2,\r\n            0,\r\n            starList[i].scale,\r\n            starList[i].scale\r\n          );\r\n\r\n          if (starList[i].stateTime > starList[i].time) {\r\n            starList.splice(i, 1);\r\n          }\r\n        } else {\r\n          let count = 0;\r\n          for (let j = 2; j >= 0; j--) {\r\n            if (starList[i].stateTime[j] <= starList[i].time[j]) {\r\n              starList[i].stateTime[j] += delta;\r\n              const target = starList[i].target[j];\r\n              const position = starList[i].position[j];\r\n              tmp\r\n                .setVector(target)\r\n                .subVector(position)\r\n                .nor()\r\n                .scale(starList[i].speed[j] * delta);\r\n              if (target.distanceSqr(position) <= tmp.len2()) {\r\n                starList[i].position[j].setVector(starList[i].target[j]);\r\n              } else {\r\n                starList[i].position[j].addVector(tmp);\r\n              }\r\n\r\n              starList[i].scale[j] -= delta * starList[i].scaleSpeed[j];\r\n              console.log(starList[i].scale[j]);\r\n              startTex.draw(\r\n                batch,\r\n                starList[i].position[j].x - S1_WIDTH / 2,\r\n                starList[i].position[j].y - S1_HEIGHT / 2,\r\n                S1_WIDTH,\r\n                S1_HEIGHT,\r\n                S1_WIDTH / 2,\r\n                S1_HEIGHT / 2,\r\n                0,\r\n                starList[i].scale[j],\r\n                starList[i].scale[j]\r\n              );\r\n            } else {\r\n              count += 1;\r\n            }\r\n          }\r\n          if (count === 3) {\r\n            starList.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createStarEffectRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}