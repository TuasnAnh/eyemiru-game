{"ast":null,"code":"import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\nimport createInstructionScreen2System from \"./InstructionScreen2\";\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\n\nconst createInstructionScreenSystem = Game => {\n  const goToInstructionScreen2 = async () => {\n    Game.setCurrentScreen(await createInstructionScreen2System(Game));\n  };\n\n  const {\n    canvas,\n    viewport,\n    width,\n    height,\n    camera,\n    batch,\n    assets\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const atlas = assets.gameAssets;\n  const backGround = atlas.findRegion(\"BG\", -1);\n  const BG_HEIGHT = height;\n  const BG_WIDTH = BG_HEIGHT * backGround.width / backGround.height;\n  const banner1 = atlas.findRegion(\"panel\", -1);\n  const BANNER_WIDTH = width;\n  const BANNER_HEIGHT = BANNER_WIDTH * banner1.height / banner1.width;\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\n    goToInstructionScreen2();\n  });\n\n  const update = delta => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(1, 1, 1, 1);\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\n    batch.end();\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createInstructionScreenSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/InstructionScreen.js"],"names":["createViewportAwareInputHandler","fillRect","Vector2","createInstructionScreen2System","checkPointInsideRect","createInstructionScreenSystem","Game","goToInstructionScreen2","setCurrentScreen","canvas","viewport","width","height","camera","batch","assets","inputHandler","atlas","gameAssets","backGround","findRegion","BG_HEIGHT","BG_WIDTH","banner1","BANNER_WIDTH","BANNER_HEIGHT","addEventListener","x","y","update","delta","setProjection","combined","begin","setColor","draw","end","destroy","cleanup"],"mappings":"AAAA,SAASA,+BAAT,EAA0CC,QAA1C,EAAoDC,OAApD,QAAmE,OAAnE;AACA,OAAOC,8BAAP,MAA2C,sBAA3C;AACA,SAASC,oBAAT,QAAqC,qBAArC;;AAEA,MAAMC,6BAA6B,GAAIC,IAAD,IAAU;AAC9C,QAAMC,sBAAsB,GAAG,YAAY;AACzCD,IAAAA,IAAI,CAACE,gBAAL,CAAsB,MAAML,8BAA8B,CAACG,IAAD,CAA1D;AACD,GAFD;;AAIA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA,MAA3B;AAAmCC,IAAAA,MAAnC;AAA2CC,IAAAA,KAA3C;AAAkDC,IAAAA;AAAlD,MAA6DT,IAAnE;AAEA,QAAMU,YAAY,GAAGhB,+BAA+B,CAACS,MAAD,EAASC,QAAT,CAApD;AAEA,QAAMO,KAAK,GAAGF,MAAM,CAACG,UAArB;AAEA,QAAMC,UAAU,GAAGF,KAAK,CAACG,UAAN,CAAiB,IAAjB,EAAuB,CAAC,CAAxB,CAAnB;AACA,QAAMC,SAAS,GAAGT,MAAlB;AACA,QAAMU,QAAQ,GAAID,SAAS,GAAGF,UAAU,CAACR,KAAxB,GAAiCQ,UAAU,CAACP,MAA7D;AACA,QAAMW,OAAO,GAAGN,KAAK,CAACG,UAAN,CAAiB,OAAjB,EAA0B,CAAC,CAA3B,CAAhB;AACA,QAAMI,YAAY,GAAGb,KAArB;AACA,QAAMc,aAAa,GAAID,YAAY,GAAGD,OAAO,CAACX,MAAxB,GAAkCW,OAAO,CAACZ,KAAhE;AAEAK,EAAAA,YAAY,CAACU,gBAAb,CAA8B,YAA9B,EAA4C,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpDrB,IAAAA,sBAAsB;AACvB,GAFD;;AAIA,QAAMsB,MAAM,GAAIC,KAAD,IAAW;AACxBhB,IAAAA,KAAK,CAACiB,aAAN,CAAoBlB,MAAM,CAACmB,QAA3B;AACAlB,IAAAA,KAAK,CAACmB,KAAN;AACAnB,IAAAA,KAAK,CAACoB,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACAf,IAAAA,UAAU,CAACgB,IAAX,CAAgBrB,KAAhB,EAAuBH,KAAK,GAAG,CAAR,GAAYW,QAAQ,GAAG,CAA9C,EAAiD,CAAjD,EAAoDA,QAApD,EAA8DD,SAA9D;AACAP,IAAAA,KAAK,CAACsB,GAAN;AACD,GAND;;AAOA,SAAO;AACLP,IAAAA,MADK;;AAELQ,IAAAA,OAAO,GAAG;AACRrB,MAAAA,YAAY,CAACsB,OAAb;AACD;;AAJI,GAAP;AAMD,CAnCD;;AAqCA,eAAejC,6BAAf","sourcesContent":["import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\r\nimport createInstructionScreen2System from \"./InstructionScreen2\";\r\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\r\n\r\nconst createInstructionScreenSystem = (Game) => {\r\n  const goToInstructionScreen2 = async () => {\r\n    Game.setCurrentScreen(await createInstructionScreen2System(Game));\r\n  };\r\n\r\n  const { canvas, viewport, width, height, camera, batch, assets } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.gameAssets;\r\n\r\n  const backGround = atlas.findRegion(\"BG\", -1);\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * backGround.width) / backGround.height;\r\n  const banner1 = atlas.findRegion(\"panel\", -1);\r\n  const BANNER_WIDTH = width;\r\n  const BANNER_HEIGHT = (BANNER_WIDTH * banner1.height) / banner1.width;\r\n\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    goToInstructionScreen2();\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\r\n    batch.end();\r\n  };\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}