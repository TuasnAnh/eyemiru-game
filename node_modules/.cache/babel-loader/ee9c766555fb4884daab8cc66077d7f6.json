{"ast":null,"code":"import { AlignMode, TextType } from \"../utils/loadFontFile\";\n\nconst createScoreRenderSystem = () => {\n  let scoreText, logo, scoreTex;\n  let LG_WIDTH, LG_HEIGHT, S_WIDTH, S_HEIGHT;\n  return {\n    init(worldState, {\n      font,\n      width,\n      height,\n      assets\n    }) {\n      let atlas = assets.gameAssets;\n      logo = atlas.findRegion(\"logo\", -1);\n      scoreTex = atlas.findRegion(\"score\", -1);\n      LG_WIDTH = width / 2;\n      LG_HEIGHT = LG_WIDTH * logo.height / logo.width;\n      S_WIDTH = width / 5;\n      S_HEIGHT = S_WIDTH * scoreTex.height / scoreTex.width;\n      scoreText = font.setNewText(width);\n      scoreText.setAlignMode(AlignMode.left);\n      scoreText.setType(TextType.dynamic);\n    },\n\n    update(delta, {\n      score\n    }, {\n      batch,\n      camera,\n      width,\n      height\n    }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(0.502, 0.867, 0.216, 1);\n      scoreText.draw(batch, `${score}`, width / 3.2, height / 10, width / 9.3);\n      batch.setColor(1, 1, 1, 1);\n      batch.end();\n    }\n\n  };\n};\n\nexport default createScoreRenderSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/systems/ScoreRenderSystem.js"],"names":["AlignMode","TextType","createScoreRenderSystem","scoreText","logo","scoreTex","LG_WIDTH","LG_HEIGHT","S_WIDTH","S_HEIGHT","init","worldState","font","width","height","assets","atlas","gameAssets","findRegion","setNewText","setAlignMode","left","setType","dynamic","update","delta","score","batch","camera","setProjection","combined","begin","setColor","draw","end"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,uBAApC;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,MAAIC,SAAJ,EAAeC,IAAf,EAAqBC,QAArB;AACA,MAAIC,QAAJ,EAAcC,SAAd,EAAyBC,OAAzB,EAAkCC,QAAlC;AACA,SAAO;AACLC,IAAAA,IAAI,CAACC,UAAD,EAAa;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,MAAf;AAAuBC,MAAAA;AAAvB,KAAb,EAA8C;AAChD,UAAIC,KAAK,GAAGD,MAAM,CAACE,UAAnB;AACAb,MAAAA,IAAI,GAAGY,KAAK,CAACE,UAAN,CAAiB,MAAjB,EAAyB,CAAC,CAA1B,CAAP;AACAb,MAAAA,QAAQ,GAAGW,KAAK,CAACE,UAAN,CAAiB,OAAjB,EAA0B,CAAC,CAA3B,CAAX;AAEAZ,MAAAA,QAAQ,GAAGO,KAAK,GAAG,CAAnB;AACAN,MAAAA,SAAS,GAAID,QAAQ,GAAGF,IAAI,CAACU,MAAjB,GAA2BV,IAAI,CAACS,KAA5C;AAEAL,MAAAA,OAAO,GAAGK,KAAK,GAAG,CAAlB;AACAJ,MAAAA,QAAQ,GAAID,OAAO,GAAGH,QAAQ,CAACS,MAApB,GAA8BT,QAAQ,CAACQ,KAAlD;AAEAV,MAAAA,SAAS,GAAGS,IAAI,CAACO,UAAL,CAAgBN,KAAhB,CAAZ;AACAV,MAAAA,SAAS,CAACiB,YAAV,CAAuBpB,SAAS,CAACqB,IAAjC;AACAlB,MAAAA,SAAS,CAACmB,OAAV,CAAkBrB,QAAQ,CAACsB,OAA3B;AACD,KAfI;;AAgBLC,IAAAA,MAAM,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAmB;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBf,MAAAA,KAAjB;AAAwBC,MAAAA;AAAxB,KAAnB,EAAqD;AACzDa,MAAAA,KAAK,CAACE,aAAN,CAAoBD,MAAM,CAACE,QAA3B;AACAH,MAAAA,KAAK,CAACI,KAAN;AACAJ,MAAAA,KAAK,CAACK,QAAN,CAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,CAApC;AACA7B,MAAAA,SAAS,CAAC8B,IAAV,CAAeN,KAAf,EAAuB,GAAED,KAAM,EAA/B,EAAkCb,KAAK,GAAG,GAA1C,EAA+CC,MAAM,GAAG,EAAxD,EAA4DD,KAAK,GAAG,GAApE;AACAc,MAAAA,KAAK,CAACK,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACAL,MAAAA,KAAK,CAACO,GAAN;AACD;;AAvBI,GAAP;AAyBD,CA5BD;;AA8BA,eAAehC,uBAAf","sourcesContent":["import { AlignMode, TextType } from \"../utils/loadFontFile\";\r\n\r\nconst createScoreRenderSystem = () => {\r\n  let scoreText, logo, scoreTex;\r\n  let LG_WIDTH, LG_HEIGHT, S_WIDTH, S_HEIGHT;\r\n  return {\r\n    init(worldState, { font, width, height, assets }) {\r\n      let atlas = assets.gameAssets;\r\n      logo = atlas.findRegion(\"logo\", -1);\r\n      scoreTex = atlas.findRegion(\"score\", -1);\r\n\r\n      LG_WIDTH = width / 2;\r\n      LG_HEIGHT = (LG_WIDTH * logo.height) / logo.width;\r\n\r\n      S_WIDTH = width / 5;\r\n      S_HEIGHT = (S_WIDTH * scoreTex.height) / scoreTex.width;\r\n\r\n      scoreText = font.setNewText(width);\r\n      scoreText.setAlignMode(AlignMode.left);\r\n      scoreText.setType(TextType.dynamic);\r\n    },\r\n    update(delta, { score }, { batch, camera, width, height }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(0.502, 0.867, 0.216, 1);\r\n      scoreText.draw(batch, `${score}`, width / 3.2, height / 10, width / 9.3);\r\n      batch.setColor(1, 1, 1, 1);\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createScoreRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}