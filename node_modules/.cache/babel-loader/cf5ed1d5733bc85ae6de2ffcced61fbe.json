{"ast":null,"code":"const createBackGroundRenderSystem = () => {\n  let bg, border;\n  let BG_WIDTH, BG_HEIGHT, B_WIDTH, B_HEIGHT;\n  return {\n    init(worldState, {\n      width,\n      height,\n      assets\n    }) {\n      let atlas = assets.gameAssets;\n      bg = atlas.findRegion(\"BG\", -1);\n      border = atlas.findRegion(\"border\", -1);\n      BG_HEIGHT = height;\n      BG_WIDTH = BG_HEIGHT * bg.width / bg.height;\n      B_HEIGHT = height;\n      B_WIDTH = B_HEIGHT * border.width / border.height;\n      LG_WIDTH = width / 2;\n      LG_HEIGHT = LG_WIDTH * logo.height / logo.width;\n      S_WIDTH = width / 5;\n      S_HEIGHT = S_WIDTH * scoreTex.height / scoreTex.width;\n    },\n\n    update(delta, worldState, {\n      batch,\n      width,\n      height,\n      camera\n    }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n      bg.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\n      border.draw(batch, 0, 0, B_WIDTH, B_HEIGHT);\n      border.draw(batch, width - B_WIDTH, 0, B_WIDTH, B_HEIGHT);\n      logo.draw(batch, width / 12, height / 35, LG_WIDTH, LG_HEIGHT);\n      scoreTex.draw(batch, width / 12, height / 9, S_WIDTH, S_HEIGHT);\n      batch.end();\n    }\n\n  };\n};\n\nexport default createBackGroundRenderSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/systems/BgRenderSystem.js"],"names":["createBackGroundRenderSystem","bg","border","BG_WIDTH","BG_HEIGHT","B_WIDTH","B_HEIGHT","init","worldState","width","height","assets","atlas","gameAssets","findRegion","LG_WIDTH","LG_HEIGHT","logo","S_WIDTH","S_HEIGHT","scoreTex","update","delta","batch","camera","setProjection","combined","begin","setColor","draw","end"],"mappings":"AAAA,MAAMA,4BAA4B,GAAG,MAAM;AACzC,MAAIC,EAAJ,EAAQC,MAAR;AACA,MAAIC,QAAJ,EAAcC,SAAd,EAAyBC,OAAzB,EAAkCC,QAAlC;AAEA,SAAO;AACLC,IAAAA,IAAI,CAACC,UAAD,EAAa;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBC,MAAAA;AAAjB,KAAb,EAAwC;AAC1C,UAAIC,KAAK,GAAGD,MAAM,CAACE,UAAnB;AAEAZ,MAAAA,EAAE,GAAGW,KAAK,CAACE,UAAN,CAAiB,IAAjB,EAAuB,CAAC,CAAxB,CAAL;AACAZ,MAAAA,MAAM,GAAGU,KAAK,CAACE,UAAN,CAAiB,QAAjB,EAA2B,CAAC,CAA5B,CAAT;AAEAV,MAAAA,SAAS,GAAGM,MAAZ;AACAP,MAAAA,QAAQ,GAAIC,SAAS,GAAGH,EAAE,CAACQ,KAAhB,GAAyBR,EAAE,CAACS,MAAvC;AAEAJ,MAAAA,QAAQ,GAAGI,MAAX;AACAL,MAAAA,OAAO,GAAIC,QAAQ,GAAGJ,MAAM,CAACO,KAAnB,GAA4BP,MAAM,CAACQ,MAA7C;AAEAK,MAAAA,QAAQ,GAAGN,KAAK,GAAG,CAAnB;AACAO,MAAAA,SAAS,GAAID,QAAQ,GAAGE,IAAI,CAACP,MAAjB,GAA2BO,IAAI,CAACR,KAA5C;AAEAS,MAAAA,OAAO,GAAGT,KAAK,GAAG,CAAlB;AACAU,MAAAA,QAAQ,GAAID,OAAO,GAAGE,QAAQ,CAACV,MAApB,GAA8BU,QAAQ,CAACX,KAAlD;AACD,KAlBI;;AAmBLY,IAAAA,MAAM,CAACC,KAAD,EAAQd,UAAR,EAAoB;AAAEe,MAAAA,KAAF;AAASd,MAAAA,KAAT;AAAgBC,MAAAA,MAAhB;AAAwBc,MAAAA;AAAxB,KAApB,EAAsD;AAC1DD,MAAAA,KAAK,CAACE,aAAN,CAAoBD,MAAM,CAACE,QAA3B;AACAH,MAAAA,KAAK,CAACI,KAAN;AACAJ,MAAAA,KAAK,CAACK,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA3B,MAAAA,EAAE,CAAC4B,IAAH,CAAQN,KAAR,EAAed,KAAK,GAAG,CAAR,GAAYN,QAAQ,GAAG,CAAtC,EAAyC,CAAzC,EAA4CA,QAA5C,EAAsDC,SAAtD;AAEAF,MAAAA,MAAM,CAAC2B,IAAP,CAAYN,KAAZ,EAAmB,CAAnB,EAAsB,CAAtB,EAAyBlB,OAAzB,EAAkCC,QAAlC;AACAJ,MAAAA,MAAM,CAAC2B,IAAP,CAAYN,KAAZ,EAAmBd,KAAK,GAAGJ,OAA3B,EAAoC,CAApC,EAAuCA,OAAvC,EAAgDC,QAAhD;AAEAW,MAAAA,IAAI,CAACY,IAAL,CAAUN,KAAV,EAAiBd,KAAK,GAAG,EAAzB,EAA6BC,MAAM,GAAG,EAAtC,EAA0CK,QAA1C,EAAoDC,SAApD;AAEAI,MAAAA,QAAQ,CAACS,IAAT,CAAcN,KAAd,EAAqBd,KAAK,GAAG,EAA7B,EAAiCC,MAAM,GAAG,CAA1C,EAA6CQ,OAA7C,EAAsDC,QAAtD;AAEAI,MAAAA,KAAK,CAACO,GAAN;AACD;;AAjCI,GAAP;AAmCD,CAvCD;;AAyCA,eAAe9B,4BAAf","sourcesContent":["const createBackGroundRenderSystem = () => {\r\n  let bg, border;\r\n  let BG_WIDTH, BG_HEIGHT, B_WIDTH, B_HEIGHT;\r\n\r\n  return {\r\n    init(worldState, { width, height, assets }) {\r\n      let atlas = assets.gameAssets;\r\n\r\n      bg = atlas.findRegion(\"BG\", -1);\r\n      border = atlas.findRegion(\"border\", -1);\r\n\r\n      BG_HEIGHT = height;\r\n      BG_WIDTH = (BG_HEIGHT * bg.width) / bg.height;\r\n\r\n      B_HEIGHT = height;\r\n      B_WIDTH = (B_HEIGHT * border.width) / border.height;\r\n\r\n      LG_WIDTH = width / 2;\r\n      LG_HEIGHT = (LG_WIDTH * logo.height) / logo.width;\r\n\r\n      S_WIDTH = width / 5;\r\n      S_HEIGHT = (S_WIDTH * scoreTex.height) / scoreTex.width;\r\n    },\r\n    update(delta, worldState, { batch, width, height, camera }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      bg.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\r\n\r\n      border.draw(batch, 0, 0, B_WIDTH, B_HEIGHT);\r\n      border.draw(batch, width - B_WIDTH, 0, B_WIDTH, B_HEIGHT);\r\n\r\n      logo.draw(batch, width / 12, height / 35, LG_WIDTH, LG_HEIGHT);\r\n\r\n      scoreTex.draw(batch, width / 12, height / 9, S_WIDTH, S_HEIGHT);\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBackGroundRenderSystem;\r\n"]},"metadata":{},"sourceType":"module"}