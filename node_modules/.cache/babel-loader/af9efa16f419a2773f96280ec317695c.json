{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\game-project\\\\eyemiru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _slicedToArray from\"E:\\\\game-project\\\\eyemiru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"E:\\\\game-project\\\\eyemiru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import\"./index.css\";import{createGameLoop,createBatch,loadTexture,loadAtlas,createViewport,fillRect}from\"gdxjs\";import createWhiteText from\"gl-white-texture\";import loadFontFile from\"./utils/loadFontFile\";import createInstructionScreenSystem from\"./screens/InstructionScreen\";var init=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var canvas,width,height,viewport,camera,gl,batch,whiteTex,Game,foxLogo,LOGO_WIDTH,LOGO_HEIGHT,counter,numOfAssets,draw,doAndCount,_yield$Promise$all,_yield$Promise$all2,gameAssets,smoke,assets,font,update;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:canvas=document.getElementById(\"main\");width=47;height=100;viewport=createViewport(canvas,width,height);camera=viewport.getCamera();gl=viewport.getContext();batch=createBatch(gl);whiteTex=createWhiteText(gl);Game={score:0,width:width,height:height,canvas:canvas,gl:gl,batch:batch,camera:camera,whiteTex:whiteTex,viewport:viewport,setCurrentScreen:function setCurrentScreen(screen){if(Game.currentScreen){Game.currentScreen.destroy();}Game.currentScreen=screen;}};_context.next=11;return loadTexture(gl,\"./assets/logo.png\");case 11:foxLogo=_context.sent;LOGO_WIDTH=width/1.8;LOGO_HEIGHT=LOGO_WIDTH*foxLogo.height/foxLogo.width;counter=0;numOfAssets=10;draw=function draw(){batch.setProjection(camera.combined);batch.begin();batch.setColor(255/255,114/255,22/255,1);fillRect(batch,whiteTex,0,0,width,height);batch.setColor(1,1,1,1);fillRect(batch,foxLogo,width/2-LOGO_WIDTH/2,height*0.8/3,LOGO_WIDTH,LOGO_HEIGHT);batch.setColor(1,1,1,1);fillRect(batch,whiteTex,width/2-width/(1.45*2),height*2.5/4-height/50,width/1.45,height/25);batch.setColor(255/255,114/255,22/255,1);fillRect(batch,whiteTex,width/2-width/3,height*2.5/4-height/60,width/1.5,height/30);batch.setColor(1,1,1,1);var ratio=counter/numOfAssets;fillRect(batch,whiteTex,width/2-width/(1.55*2),height*2.5/4-height/80,width/1.55*ratio,height/40);batch.end();};doAndCount=function doAndCount(promise){return promise.then(function(result){// draw();\ncounter+=1;return result;});};_context.next=20;return Promise.all([doAndCount(loadAtlas(gl,\"./assets/eyemiru.atlas\")),doAndCount(loadAtlas(gl,\"./assets/smoke.atlas\"))]);case 20:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);gameAssets=_yield$Promise$all2[0];smoke=_yield$Promise$all2[1];assets={gameAssets:gameAssets,smoke:smoke};Game.assets=assets;_context.next=28;return loadFontFile(gl,\"./fonts/text.fnt\");case 28:font=_context.sent;Game.font=font;_context.t0=Game;_context.next=33;return createInstructionScreenSystem(Game);case 33:_context.t1=_context.sent;_context.t0.setCurrentScreen.call(_context.t0,_context.t1);gl.clearColor(1,1,1,1);update=function update(delta){gl.clear(gl.COLOR_BUFFER_BIT);if(Game.currentScreen){Game.currentScreen.update(delta);}};createGameLoop(update);case 38:case\"end\":return _context.stop();}}},_callee);}));return function init(){return _ref.apply(this,arguments);};}();init();","map":{"version":3,"sources":["E:/game-project/eyemiru/src/index.js"],"names":["createGameLoop","createBatch","loadTexture","loadAtlas","createViewport","fillRect","createWhiteText","loadFontFile","createInstructionScreenSystem","init","canvas","document","getElementById","width","height","viewport","camera","getCamera","gl","getContext","batch","whiteTex","Game","score","setCurrentScreen","screen","currentScreen","destroy","foxLogo","LOGO_WIDTH","LOGO_HEIGHT","counter","numOfAssets","draw","setProjection","combined","begin","setColor","ratio","end","doAndCount","promise","then","result","Promise","all","gameAssets","smoke","assets","font","clearColor","update","delta","clear","COLOR_BUFFER_BIT"],"mappings":"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","sourcesContent":["import \"./index.css\";\nimport {\n  createGameLoop,\n  createBatch,\n  loadTexture,\n  loadAtlas,\n  createViewport,\n  fillRect,\n} from \"gdxjs\";\nimport createWhiteText from \"gl-white-texture\";\nimport loadFontFile from \"./utils/loadFontFile\";\nimport createInstructionScreenSystem from \"./screens/InstructionScreen\";\n\nconst init = async () => {\n  const canvas = document.getElementById(\"main\");\n  const width = 47;\n  const height = 100;\n  const viewport = createViewport(canvas, width, height);\n  const camera = viewport.getCamera();\n  const gl = viewport.getContext();\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteText(gl);\n\n  const Game = {\n    score: 0,\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    viewport,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    },\n  };\n\n  const foxLogo = await loadTexture(gl, \"./assets/logo.png\");\n  const LOGO_WIDTH = width / 1.8;\n  const LOGO_HEIGHT = (LOGO_WIDTH * foxLogo.height) / foxLogo.width;\n\n  let counter = 0;\n  const numOfAssets = 10;\n\n  const draw = () => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(255 / 255, 114 / 255, 22 / 255, 1);\n    fillRect(batch, whiteTex, 0, 0, width, height);\n    batch.setColor(1, 1, 1, 1);\n    fillRect(\n      batch,\n      foxLogo,\n      width / 2 - LOGO_WIDTH / 2,\n      (height * 0.8) / 3,\n      LOGO_WIDTH,\n      LOGO_HEIGHT\n    );\n    batch.setColor(1, 1, 1, 1);\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / (1.45 * 2),\n      (height * 2.5) / 4 - height / 50,\n      width / 1.45,\n      height / 25\n    );\n    batch.setColor(255 / 255, 114 / 255, 22 / 255, 1);\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / 3,\n      (height * 2.5) / 4 - height / 60,\n      width / 1.5,\n      height / 30\n    );\n    batch.setColor(1, 1, 1, 1);\n    let ratio = counter / numOfAssets;\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / (1.55 * 2),\n      (height * 2.5) / 4 - height / 80,\n      (width / 1.55) * ratio,\n      height / 40\n    );\n    batch.end();\n  };\n\n  const doAndCount = (promise) =>\n    promise.then((result) => {\n      // draw();\n      counter += 1;\n      return result;\n    });\n\n  const [gameAssets, smoke] = await Promise.all([\n    doAndCount(loadAtlas(gl, \"./assets/eyemiru.atlas\")),\n    doAndCount(loadAtlas(gl, \"./assets/smoke.atlas\")),\n  ]);\n\n  let assets = {\n    gameAssets,\n    smoke,\n  };\n  Game.assets = assets;\n\n  const font = await loadFontFile(gl, \"./fonts/text.fnt\");\n  Game.font = font;\n  Game.setCurrentScreen(await createInstructionScreenSystem(Game));\n\n  gl.clearColor(1, 1, 1, 1);\n  const update = (delta) => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  createGameLoop(update);\n};\n\ninit();\n"]},"metadata":{},"sourceType":"module"}