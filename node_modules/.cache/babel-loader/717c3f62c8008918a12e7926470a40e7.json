{"ast":null,"code":"// import ReactDOM from \"react-dom\";\n// import React from \"react\";\n// import LeaderBoard from \"../LeaderBoard\";\n// import axios from \"../../utils/axios\";\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\nimport createWorld from \"../utils/createWorld\";\nimport { getProductInBasketTex, getProductTexture, getFakeProductTex } from \"../utils/getProduct\";\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\nimport createBackGroundRenderSystem from \"../systems/BgRenderSystem\";\nimport createBasketRenderSystem from \"../systems/BasketRenderSystem\";\nimport createInputHandlerGameScreenSystem from \"../systems/InputHandlerGameScreenSystem\";\nimport createBasketPositionSystem from \"../systems/BasketPositionSystem\";\nimport createProductSpawnSystem from \"../systems/ProductSpawnSystem\";\nimport createProductPositionSystem from \"../systems/ProductPositionSystem\";\nimport createProductRenderSystem from \"../systems/ProductRenderSystem\";\nimport createBasketCollideSystem from \"../systems/BasketCollideSystem\";\nimport createScoreCalcSystem from \"../systems/ScoreCaculateSystem\";\nimport createLifeRenderSystem from \"../systems/LifeRenderSystem\";\nimport createStarEffectRenderSystem from \"../systems/StarEffectRenderSystem\";\nimport createStunScreenRenderSystem from \"../systems/StunScreenSystem\";\nimport createWhiteSmokeRenderSystem from \"../systems/WhiteSmokeRenderSystem\";\nimport createVitaminARenderSystem from \"../systems/VitaminARenderSystem\";\n\nconst createGameScreenSystem = Game => {\n  const {\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    assets,\n    viewport,\n    font\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const BASKET_INITIAL_Y = height * 3.65 / 4;\n  const basketBack = assets.gameAssets.findRegion(\"basket_back\", -1);\n  const BASKET_WIDTH = width / 3.8;\n  const BASKET_BACK_HEIGHT = BASKET_WIDTH * basketBack.height / basketBack.width;\n  const productTex = getProductTexture(assets.gameAssets);\n  const fakeProductTex = getFakeProductTex(assets.gameAssets);\n  const productInBasketTex = getProductInBasketTex(assets.gameAssets);\n  const worldState = {\n    score: 0,\n    correctCatch: false,\n    stateTime: 0,\n    gameOver: false,\n    emptyLife: false,\n    life: [{\n      open: true\n    }, {\n      open: true\n    }, {\n      open: true\n    }],\n    lifeIndex: 2,\n    // life checking index\n    basketState: {\n      x: width / 2,\n      y: BASKET_INITIAL_Y,\n      width: BASKET_WIDTH,\n      height: BASKET_BACK_HEIGHT,\n      position: new Vector2(width / 2, BASKET_INITIAL_Y),\n      target: new Vector2(width / 2, BASKET_INITIAL_Y),\n      speed: width * 2.5\n    },\n    difficulty: 1,\n    collection: [{\n      type: 0,\n      enable: false\n    }, {\n      type: 0,\n      enable: false\n    }, {\n      type: 1,\n      enable: false\n    }],\n    collectionFinished: [],\n    products: [],\n    productInfos: {\n      accY: height / 2\n    },\n    starList: [],\n    whiteSmokeList: [],\n    stunScreen: {\n      check: false,\n      opacity: 1\n    },\n    vitaminACounter: 0\n  };\n  const extra = {\n    canvas,\n    width,\n    height,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    inputHandler,\n    assets,\n    productTex,\n    fakeProductTex,\n    productInBasketTex\n  };\n  const world = createWorld(worldState, extra);\n  world.addSystem(createInputHandlerGameScreenSystem());\n  world.addSystem(createBasketPositionSystem());\n  world.addSystem(createProductSpawnSystem());\n  world.addSystem(createProductPositionSystem());\n  world.addSystem(createBasketCollideSystem());\n  world.addSystem(createScoreCalcSystem());\n  world.addSystem(createBackGroundRenderSystem());\n  world.addSystem(createBasketRenderSystem());\n  world.addSystem(createProductRenderSystem());\n  world.addSystem(createLifeRenderSystem());\n  world.addSystem(createVitaminARenderSystem());\n  world.addSystem(createStarEffectRenderSystem());\n  world.addSystem(createWhiteSmokeRenderSystem());\n  world.addSystem(createStunScreenRenderSystem());\n\n  const goToLeaderBoardScreen = async () => {\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\n  };\n\n  const update = delta => {\n    if (!worldState.gameOver) {\n      worldState.stateTime += delta;\n      world.update(delta);\n    } else {\n      goToLeaderBoardScreen();\n    }\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createGameScreenSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/GameScreen.js"],"names":["createViewportAwareInputHandler","Vector2","createWorld","getProductInBasketTex","getProductTexture","getFakeProductTex","createLeaderBoardSystem","createBackGroundRenderSystem","createBasketRenderSystem","createInputHandlerGameScreenSystem","createBasketPositionSystem","createProductSpawnSystem","createProductPositionSystem","createProductRenderSystem","createBasketCollideSystem","createScoreCalcSystem","createLifeRenderSystem","createStarEffectRenderSystem","createStunScreenRenderSystem","createWhiteSmokeRenderSystem","createVitaminARenderSystem","createGameScreenSystem","Game","width","height","canvas","gl","batch","camera","whiteTex","assets","viewport","font","inputHandler","BASKET_INITIAL_Y","basketBack","gameAssets","findRegion","BASKET_WIDTH","BASKET_BACK_HEIGHT","productTex","fakeProductTex","productInBasketTex","worldState","score","correctCatch","stateTime","gameOver","emptyLife","life","open","lifeIndex","basketState","x","y","position","target","speed","difficulty","collection","type","enable","collectionFinished","products","productInfos","accY","starList","whiteSmokeList","stunScreen","check","opacity","vitaminACounter","extra","world","addSystem","goToLeaderBoardScreen","setCurrentScreen","update","delta","destroy","cleanup"],"mappings":"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","sourcesContent":["// import ReactDOM from \"react-dom\";\r\n// import React from \"react\";\r\n// import LeaderBoard from \"../LeaderBoard\";\r\n// import axios from \"../../utils/axios\";\r\n\r\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\r\nimport createWorld from \"../utils/createWorld\";\r\nimport {\r\n  getProductInBasketTex,\r\n  getProductTexture,\r\n  getFakeProductTex,\r\n} from \"../utils/getProduct\";\r\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\r\nimport createBackGroundRenderSystem from \"../systems/BgRenderSystem\";\r\nimport createBasketRenderSystem from \"../systems/BasketRenderSystem\";\r\nimport createInputHandlerGameScreenSystem from \"../systems/InputHandlerGameScreenSystem\";\r\nimport createBasketPositionSystem from \"../systems/BasketPositionSystem\";\r\nimport createProductSpawnSystem from \"../systems/ProductSpawnSystem\";\r\nimport createProductPositionSystem from \"../systems/ProductPositionSystem\";\r\nimport createProductRenderSystem from \"../systems/ProductRenderSystem\";\r\nimport createBasketCollideSystem from \"../systems/BasketCollideSystem\";\r\nimport createScoreCalcSystem from \"../systems/ScoreCaculateSystem\";\r\nimport createLifeRenderSystem from \"../systems/LifeRenderSystem\";\r\nimport createStarEffectRenderSystem from \"../systems/StarEffectRenderSystem\";\r\nimport createStunScreenRenderSystem from \"../systems/StunScreenSystem\";\r\nimport createWhiteSmokeRenderSystem from \"../systems/WhiteSmokeRenderSystem\";\r\nimport createVitaminARenderSystem from \"../systems/VitaminARenderSystem\";\r\n\r\nconst createGameScreenSystem = (Game) => {\r\n  const {\r\n    width,\r\n    height,\r\n    canvas,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    assets,\r\n    viewport,\r\n    font,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n  const BASKET_INITIAL_Y = (height * 3.65) / 4;\r\n\r\n  const basketBack = assets.gameAssets.findRegion(\"basket_back\", -1);\r\n  const BASKET_WIDTH = width / 3.8;\r\n  const BASKET_BACK_HEIGHT =\r\n    (BASKET_WIDTH * basketBack.height) / basketBack.width;\r\n\r\n  const productTex = getProductTexture(assets.gameAssets);\r\n  const fakeProductTex = getFakeProductTex(assets.gameAssets);\r\n  const productInBasketTex = getProductInBasketTex(assets.gameAssets);\r\n\r\n  const worldState = {\r\n    score: 0,\r\n    correctCatch: false,\r\n    stateTime: 0,\r\n    gameOver: false,\r\n    emptyLife: false,\r\n    life: [{ open: true }, { open: true }, { open: true }],\r\n    lifeIndex: 2, // life checking index\r\n    basketState: {\r\n      x: width / 2,\r\n      y: BASKET_INITIAL_Y,\r\n      width: BASKET_WIDTH,\r\n      height: BASKET_BACK_HEIGHT,\r\n      position: new Vector2(width / 2, BASKET_INITIAL_Y),\r\n      target: new Vector2(width / 2, BASKET_INITIAL_Y),\r\n      speed: width * 2.5,\r\n    },\r\n    difficulty: 1,\r\n    collection: [\r\n      { type: 0, enable: false },\r\n      { type: 0, enable: false },\r\n      { type: 1, enable: false },\r\n    ],\r\n    collectionFinished: [],\r\n    products: [],\r\n    productInfos: {\r\n      accY: height / 2,\r\n    },\r\n    starList: [],\r\n    whiteSmokeList: [],\r\n    stunScreen: { check: false, opacity: 1 },\r\n    vitaminACounter: 0,\r\n  };\r\n\r\n  const extra = {\r\n    canvas,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    inputHandler,\r\n    assets,\r\n    productTex,\r\n    fakeProductTex,\r\n    productInBasketTex,\r\n  };\r\n  const world = createWorld(worldState, extra);\r\n\r\n  world.addSystem(createInputHandlerGameScreenSystem());\r\n  world.addSystem(createBasketPositionSystem());\r\n  world.addSystem(createProductSpawnSystem());\r\n  world.addSystem(createProductPositionSystem());\r\n  world.addSystem(createBasketCollideSystem());\r\n  world.addSystem(createScoreCalcSystem());\r\n\r\n  world.addSystem(createBackGroundRenderSystem());\r\n  world.addSystem(createBasketRenderSystem());\r\n  world.addSystem(createProductRenderSystem());\r\n  world.addSystem(createLifeRenderSystem());\r\n  world.addSystem(createVitaminARenderSystem());\r\n  world.addSystem(createStarEffectRenderSystem());\r\n  world.addSystem(createWhiteSmokeRenderSystem());\r\n\r\n  world.addSystem(createStunScreenRenderSystem());\r\n\r\n  const goToLeaderBoardScreen = async () => {\r\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\r\n  };\r\n\r\n  const update = (delta) => {\r\n    if (!worldState.gameOver) {\r\n      worldState.stateTime += delta;\r\n      world.update(delta);\r\n    } else {\r\n      goToLeaderBoardScreen();\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createGameScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}