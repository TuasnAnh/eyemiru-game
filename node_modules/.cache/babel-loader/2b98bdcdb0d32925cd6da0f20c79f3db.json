{"ast":null,"code":"// import ReactDOM from \"react-dom\";\n// import React from \"react\";\n// import LeaderBoard from \"../LeaderBoard\";\n// import axios from \"../../utils/axios\";\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\nimport createWorld from \"../utils/createWorld\"; // import \"../utils/getProduct\";\n\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\n\nconst createGameScreenSystem = Game => {\n  const {\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    assets,\n    viewport,\n    font\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const TRAY_INITIAL_Y = height * 3.1 / 4;\n  const recipes = [];\n  const worldState = {\n    score: 0,\n    // keep\n    comboCounter: 0,\n    // keep\n    correctCatch: false,\n    // keep\n    genderNewRecipeAmount: true,\n    // dont need\n    stateTime: 0,\n    // keep\n    gameOver: false,\n    // keep\n    emptyLife: false,\n    // keep\n    life: [{\n      red: true\n    }, {\n      red: true\n    }, {\n      red: true\n    }],\n    // keep\n    lifeIndex: 2,\n    // life checking index // keep\n    stunScreen: {\n      check: false,\n      opacity: 1\n    },\n    // dont need\n    trayState: {\n      x: width / 2,\n      y: TRAY_INITIAL_Y,\n      position: new Vector2(width / 2, TRAY_INITIAL_Y),\n      target: new Vector2(width / 2, TRAY_INITIAL_Y),\n      moveLeft: false,\n      moveRight: false,\n      speed: width * 2.5 // offsetCheckY: 0, //\n\n    },\n    difficulty: 1,\n    // keep\n    collection: [],\n    // keep\n    collectionFinished: [],\n    // keep\n    recipes: recipes,\n    // dont need\n    foods: [],\n    // keep\n    // foodAnimation: getFoodAnimation(assets.animAssets).foodAnimation,\n    // smokeAnimation: getFoodAnimation(assets.animAssets).smokeAnimation,\n    // foodInPot: getFoodInPotTexture(assets.foodInPot),\n    whiteSmokeList: [],\n    // contain position of ws when collection have that kind of food\n    redSmokeList: [],\n    // contain position of rs whenever red smoke event triggered\n    comboState: {\n      delayTime: 0.5,\n      scaleSpeed: (1 - 0) / 0.2,\n      opacitySpeed: (1 - 0) / 0.2\n    },\n    comboCheckIndex: []\n  };\n  const tray = assets.foodInPot.findRegion(\"hot_pot\", -1);\n  const TRAY_WIDTH = width / 3.8;\n  const TRAY_HEIGHT = TRAY_WIDTH * tray.height / tray.width;\n  worldState.trayState.width = TRAY_WIDTH;\n  worldState.trayState.height = TRAY_HEIGHT;\n  const extra = {\n    canvas,\n    width,\n    height,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    inputHandler,\n    assets,\n    font\n  };\n  const world = createWorld(worldState, extra);\n  let count = 0;\n  let countRemainLife = worldState.life.length;\n  let oneTimeCheck = true; // const restartGame = async () => {\n  //   Game.setCurrentScreen(await createStartScreenSystem(Game));\n  // };\n\n  const goToLeaderBoardScreen = async () => {\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\n  };\n\n  const update = delta => {\n    if (!worldState.gameOver) {// check remaining life\n      //     countRemainLife = worldState.life.length;\n      //     for (let l of worldState.life) {\n      //       if (!l.red) {\n      //         countRemainLife--;\n      //       }\n      //     }\n      //     if (countRemainLife === 0 && oneTimeCheck) {\n      //       worldState.emptyLife = true;\n      //       oneTimeCheck = false;\n      //       for (let i = 0; i < worldState.foods.length; i++) {\n      //         worldState.redSmokeList.push({\n      //           x: worldState.foods[i].x,\n      //           y: worldState.foods[i].y,\n      //           stateTime: 0,\n      //           scale: worldState.foods[i].oriScale,\n      //         });\n      //       }\n      //       worldState.foods.length = 0;\n      //       worldState.gameOver = true;\n      //     }\n      //     // check finished current recipe\n      //     count = 0;\n      //     for (let rep of worldState.recipes) {\n      //       if (rep.finished) {\n      //         count++;\n      //       }\n      //     }\n      //     if (count === worldState.recipes.length) {\n      //       for (let i = 0; i < worldState.foods.length; i++) {\n      //         worldState.redSmokeList.push({\n      //           x: worldState.foods[i].x,\n      //           y: worldState.foods[i].y,\n      //           stateTime: 0,\n      //           scale: worldState.foods[i].oriScale,\n      //         });\n      //       }\n      //       genderNewRecipe();\n      //       worldState.genderNewRecipeAmount = true;\n      //       worldState.foods.length = 0;\n      //       worldState.collection.length = 0;\n      //       worldState.difficulty += 1;\n      //       // worldState.trayState.offsetCheckY = 0;\n      //     }\n      //     worldState.stateTime += delta;\n      //     world.update(delta);\n      //   } else {\n      //     // inputHandler.cleanup();\n      //     // world.update(delta, true);\n      //     Game.score = worldState.score;\n      //     goToLeaderBoardScreen();\n      //     // showLeaderBoard(worldState.score, restartGame);\n    }\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createGameScreenSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/GameScreen.js"],"names":["createViewportAwareInputHandler","Vector2","createWorld","createLeaderBoardSystem","createGameScreenSystem","Game","width","height","canvas","gl","batch","camera","whiteTex","assets","viewport","font","inputHandler","TRAY_INITIAL_Y","recipes","worldState","score","comboCounter","correctCatch","genderNewRecipeAmount","stateTime","gameOver","emptyLife","life","red","lifeIndex","stunScreen","check","opacity","trayState","x","y","position","target","moveLeft","moveRight","speed","difficulty","collection","collectionFinished","foods","whiteSmokeList","redSmokeList","comboState","delayTime","scaleSpeed","opacitySpeed","comboCheckIndex","tray","foodInPot","findRegion","TRAY_WIDTH","TRAY_HEIGHT","extra","world","count","countRemainLife","length","oneTimeCheck","goToLeaderBoardScreen","setCurrentScreen","update","delta","destroy","cleanup"],"mappings":"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,KAAK,GAAG,CAAZ;AACA,MAAIC,eAAe,GAAGzC,UAAU,CAACQ,IAAX,CAAgBkC,MAAtC;AACA,MAAIC,YAAY,GAAG,IAAnB,CAhFuC,CAkFvC;AACA;AACA;;AACA,QAAMC,qBAAqB,GAAG,YAAY;AACxC1D,IAAAA,IAAI,CAAC2D,gBAAL,CAAsB,MAAM7D,uBAAuB,CAACE,IAAD,CAAnD;AACD,GAFD;;AAIA,QAAM4D,MAAM,GAAIC,KAAD,IAAW;AACxB,QAAI,CAAC/C,UAAU,CAACM,QAAhB,EAA0B,CACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,GAvDD;;AAyDA,SAAO;AACLwC,IAAAA,MADK;;AAELE,IAAAA,OAAO,GAAG;AACRnD,MAAAA,YAAY,CAACoD,OAAb;AACD;;AAJI,GAAP;AAMD,CAxJD;;AA0JA,eAAehE,sBAAf","sourcesContent":["// import ReactDOM from \"react-dom\";\r\n// import React from \"react\";\r\n// import LeaderBoard from \"../LeaderBoard\";\r\n// import axios from \"../../utils/axios\";\r\n\r\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\r\nimport createWorld from \"../utils/createWorld\";\r\n// import \"../utils/getProduct\";\r\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\r\n\r\nconst createGameScreenSystem = (Game) => {\r\n  const {\r\n    width,\r\n    height,\r\n    canvas,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    assets,\r\n    viewport,\r\n    font,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n  const TRAY_INITIAL_Y = (height * 3.1) / 4;\r\n\r\n  const recipes = [];\r\n\r\n  const worldState = {\r\n    score: 0, // keep\r\n    comboCounter: 0, // keep\r\n    correctCatch: false, // keep\r\n    genderNewRecipeAmount: true, // dont need\r\n    stateTime: 0, // keep\r\n    gameOver: false, // keep\r\n    emptyLife: false, // keep\r\n    life: [{ red: true }, { red: true }, { red: true }], // keep\r\n    lifeIndex: 2, // life checking index // keep\r\n    stunScreen: { check: false, opacity: 1 }, // dont need\r\n    trayState: {\r\n      x: width / 2,\r\n      y: TRAY_INITIAL_Y,\r\n      position: new Vector2(width / 2, TRAY_INITIAL_Y),\r\n      target: new Vector2(width / 2, TRAY_INITIAL_Y),\r\n      moveLeft: false,\r\n      moveRight: false,\r\n      speed: width * 2.5,\r\n      // offsetCheckY: 0, //\r\n    },\r\n    difficulty: 1, // keep\r\n    collection: [], // keep\r\n    collectionFinished: [], // keep\r\n    recipes: recipes, // dont need\r\n    foods: [], // keep\r\n    // foodAnimation: getFoodAnimation(assets.animAssets).foodAnimation,\r\n    // smokeAnimation: getFoodAnimation(assets.animAssets).smokeAnimation,\r\n    // foodInPot: getFoodInPotTexture(assets.foodInPot),\r\n    whiteSmokeList: [], // contain position of ws when collection have that kind of food\r\n    redSmokeList: [], // contain position of rs whenever red smoke event triggered\r\n    comboState: {\r\n      delayTime: 0.5,\r\n      scaleSpeed: (1 - 0) / 0.2,\r\n      opacitySpeed: (1 - 0) / 0.2,\r\n    },\r\n    comboCheckIndex: [],\r\n  };\r\n\r\n  const tray = assets.foodInPot.findRegion(\"hot_pot\", -1);\r\n  const TRAY_WIDTH = width / 3.8;\r\n  const TRAY_HEIGHT = (TRAY_WIDTH * tray.height) / tray.width;\r\n  worldState.trayState.width = TRAY_WIDTH;\r\n  worldState.trayState.height = TRAY_HEIGHT;\r\n\r\n  const extra = {\r\n    canvas,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    inputHandler,\r\n    assets,\r\n    font,\r\n  };\r\n  const world = createWorld(worldState, extra);\r\n\r\n  let count = 0;\r\n  let countRemainLife = worldState.life.length;\r\n  let oneTimeCheck = true;\r\n\r\n  // const restartGame = async () => {\r\n  //   Game.setCurrentScreen(await createStartScreenSystem(Game));\r\n  // };\r\n  const goToLeaderBoardScreen = async () => {\r\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\r\n  };\r\n\r\n  const update = (delta) => {\r\n    if (!worldState.gameOver) {\r\n      // check remaining life\r\n      //     countRemainLife = worldState.life.length;\r\n      //     for (let l of worldState.life) {\r\n      //       if (!l.red) {\r\n      //         countRemainLife--;\r\n      //       }\r\n      //     }\r\n      //     if (countRemainLife === 0 && oneTimeCheck) {\r\n      //       worldState.emptyLife = true;\r\n      //       oneTimeCheck = false;\r\n      //       for (let i = 0; i < worldState.foods.length; i++) {\r\n      //         worldState.redSmokeList.push({\r\n      //           x: worldState.foods[i].x,\r\n      //           y: worldState.foods[i].y,\r\n      //           stateTime: 0,\r\n      //           scale: worldState.foods[i].oriScale,\r\n      //         });\r\n      //       }\r\n      //       worldState.foods.length = 0;\r\n      //       worldState.gameOver = true;\r\n      //     }\r\n      //     // check finished current recipe\r\n      //     count = 0;\r\n      //     for (let rep of worldState.recipes) {\r\n      //       if (rep.finished) {\r\n      //         count++;\r\n      //       }\r\n      //     }\r\n      //     if (count === worldState.recipes.length) {\r\n      //       for (let i = 0; i < worldState.foods.length; i++) {\r\n      //         worldState.redSmokeList.push({\r\n      //           x: worldState.foods[i].x,\r\n      //           y: worldState.foods[i].y,\r\n      //           stateTime: 0,\r\n      //           scale: worldState.foods[i].oriScale,\r\n      //         });\r\n      //       }\r\n      //       genderNewRecipe();\r\n      //       worldState.genderNewRecipeAmount = true;\r\n      //       worldState.foods.length = 0;\r\n      //       worldState.collection.length = 0;\r\n      //       worldState.difficulty += 1;\r\n      //       // worldState.trayState.offsetCheckY = 0;\r\n      //     }\r\n      //     worldState.stateTime += delta;\r\n      //     world.update(delta);\r\n      //   } else {\r\n      //     // inputHandler.cleanup();\r\n      //     // world.update(delta, true);\r\n      //     Game.score = worldState.score;\r\n      //     goToLeaderBoardScreen();\r\n      //     // showLeaderBoard(worldState.score, restartGame);\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createGameScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}