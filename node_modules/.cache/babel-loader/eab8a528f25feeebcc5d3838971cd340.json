{"ast":null,"code":"import { mat4 } from 'gl-matrix';\nimport { unproject } from 'gdxjs/lib/mathUtils';\nimport Vector2 from './Vector2';\nexport default ((width, height, viewportWidth, viewportHeight) => {\n  const combined = mat4.create();\n  const transform = mat4.create();\n  const invOrtho = mat4.create();\n  const zoom = mat4.create();\n  const lookAtMatrix = mat4.create();\n  const position = new Vector2(0, 0);\n  const NEAR = 0;\n  const FAR = 1;\n  const tmp3 = [0, 0, 0];\n  const eye = [0, 0, FAR];\n  const center = [0, 0, NEAR];\n  const up = [0, 1, 0];\n\n  const update = () => {\n    mat4.ortho(combined, 0, width, height, 0, NEAR, FAR);\n    const x = position.x;\n    const y = position.y;\n    eye[0] = center[0] = x;\n    eye[1] = center[1] = y;\n    mat4.identity(transform);\n    mat4.lookAt(lookAtMatrix, eye, center, up);\n    mat4.mul(transform, transform, lookAtMatrix);\n    mat4.mul(transform, transform, zoom);\n    mat4.mul(combined, combined, transform);\n    mat4.invert(invOrtho, combined);\n  };\n\n  update();\n  return {\n    combined,\n\n    getPosition() {\n      return position;\n    },\n\n    zoomTo(x, y, scale) {\n      mat4.translate(zoom, zoom, [x, y, 0]);\n      mat4.scale(zoom, zoom, [scale, scale, 1]);\n      mat4.translate(zoom, zoom, [-x, -y, 0]);\n      update();\n    },\n\n    setMatrix(mat) {\n      mat4.copy(combined, mat);\n      mat4.invert(invOrtho, combined);\n    },\n\n    setYUp(yUp) {\n      if (yUp) {\n        up[1] = -1;\n      } else {\n        up[1] = 1;\n      }\n\n      update();\n    },\n\n    setPosition(x, y) {\n      position.set(x, y);\n      update();\n    },\n\n    unprojectVector2(out, input) {\n      tmp3[0] = input.x;\n      tmp3[1] = input.y;\n      tmp3[2] = 0;\n      unproject(tmp3, tmp3, invOrtho, 0, 0, viewportWidth, viewportHeight);\n      out.set(tmp3[0], tmp3[1]);\n    },\n\n    resize(newWidth, newHeight, newVWidth, newVHeight) {\n      width = newWidth;\n      height = newHeight;\n      newVWidth && (viewportWidth = newVWidth);\n      newVHeight && (viewportHeight = newVHeight);\n      update();\n    }\n\n  };\n});","map":{"version":3,"sources":["E:/game-project/eyemiru/node_modules/gdxjs/lib/orthoCamera.js"],"names":["mat4","unproject","Vector2","width","height","viewportWidth","viewportHeight","combined","create","transform","invOrtho","zoom","lookAtMatrix","position","NEAR","FAR","tmp3","eye","center","up","update","ortho","x","y","identity","lookAt","mul","invert","getPosition","zoomTo","scale","translate","setMatrix","mat","copy","setYUp","yUp","setPosition","set","unprojectVector2","out","input","resize","newWidth","newHeight","newVWidth","newVHeight"],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { unproject } from 'gdxjs/lib/mathUtils';\nimport Vector2 from './Vector2';\nexport default ((width, height, viewportWidth, viewportHeight) => {\n  const combined = mat4.create();\n  const transform = mat4.create();\n  const invOrtho = mat4.create();\n  const zoom = mat4.create();\n  const lookAtMatrix = mat4.create();\n  const position = new Vector2(0, 0);\n  const NEAR = 0;\n  const FAR = 1;\n  const tmp3 = [0, 0, 0];\n  const eye = [0, 0, FAR];\n  const center = [0, 0, NEAR];\n  const up = [0, 1, 0];\n\n  const update = () => {\n    mat4.ortho(combined, 0, width, height, 0, NEAR, FAR);\n    const x = position.x;\n    const y = position.y;\n    eye[0] = center[0] = x;\n    eye[1] = center[1] = y;\n    mat4.identity(transform);\n    mat4.lookAt(lookAtMatrix, eye, center, up);\n    mat4.mul(transform, transform, lookAtMatrix);\n    mat4.mul(transform, transform, zoom);\n    mat4.mul(combined, combined, transform);\n    mat4.invert(invOrtho, combined);\n  };\n\n  update();\n  return {\n    combined,\n\n    getPosition() {\n      return position;\n    },\n\n    zoomTo(x, y, scale) {\n      mat4.translate(zoom, zoom, [x, y, 0]);\n      mat4.scale(zoom, zoom, [scale, scale, 1]);\n      mat4.translate(zoom, zoom, [-x, -y, 0]);\n      update();\n    },\n\n    setMatrix(mat) {\n      mat4.copy(combined, mat);\n      mat4.invert(invOrtho, combined);\n    },\n\n    setYUp(yUp) {\n      if (yUp) {\n        up[1] = -1;\n      } else {\n        up[1] = 1;\n      }\n\n      update();\n    },\n\n    setPosition(x, y) {\n      position.set(x, y);\n      update();\n    },\n\n    unprojectVector2(out, input) {\n      tmp3[0] = input.x;\n      tmp3[1] = input.y;\n      tmp3[2] = 0;\n      unproject(tmp3, tmp3, invOrtho, 0, 0, viewportWidth, viewportHeight);\n      out.set(tmp3[0], tmp3[1]);\n    },\n\n    resize(newWidth, newHeight, newVWidth, newVHeight) {\n      width = newWidth;\n      height = newHeight;\n      newVWidth && (viewportWidth = newVWidth);\n      newVHeight && (viewportHeight = newVHeight);\n      update();\n    }\n\n  };\n});"]},"metadata":{},"sourceType":"module"}