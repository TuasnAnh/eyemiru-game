{"ast":null,"code":"import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\nimport createInstructionScreen2System from \"./InstructionScreen2\";\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\n\nconst createInstructionScreenSystem = Game => {\n  const goToInstructionScreen2 = async () => {\n    Game.setCurrentScreen(await createInstructionScreen2System(Game));\n  };\n\n  const {\n    canvas,\n    viewport,\n    width,\n    height,\n    camera,\n    batch,\n    assets,\n    whiteTex\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const atlas = assets.gameAssets;\n  const backGround = atlas.findRegion(\"BG\", -1);\n  const BG_HEIGHT = height;\n  const BG_WIDTH = BG_HEIGHT * backGround.width / backGround.height;\n  const panel1 = atlas.findRegion(\"panel\", -1);\n  const PANEL_WIDTH = width;\n  const PANEL_HEIGHT = PANEL_WIDTH * panel1.height / panel1.width; // inputHandler.addEventListener(\"touchStart\", (x, y) => {\n  //   goToInstructionScreen2();\n  // });\n\n  const update = delta => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(0.039, 0.988, 0.114, 1);\n    fillRect(batch, whiteTex, 0, 0, width, height);\n    batch.setColor(1, 1, 1, 1);\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\n    panel1.draw(batch, width / 2 - PANEL_WIDTH / 2, height / 3, PANEL_WIDTH, PANEL_HEIGHT);\n    batch.end();\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createInstructionScreenSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/InstructionScreen.js"],"names":["createViewportAwareInputHandler","fillRect","Vector2","createInstructionScreen2System","checkPointInsideRect","createInstructionScreenSystem","Game","goToInstructionScreen2","setCurrentScreen","canvas","viewport","width","height","camera","batch","assets","whiteTex","inputHandler","atlas","gameAssets","backGround","findRegion","BG_HEIGHT","BG_WIDTH","panel1","PANEL_WIDTH","PANEL_HEIGHT","update","delta","setProjection","combined","begin","setColor","draw","end","destroy","cleanup"],"mappings":"AAAA,SAASA,+BAAT,EAA0CC,QAA1C,EAAoDC,OAApD,QAAmE,OAAnE;AACA,OAAOC,8BAAP,MAA2C,sBAA3C;AACA,SAASC,oBAAT,QAAqC,qBAArC;;AAEA,MAAMC,6BAA6B,GAAIC,IAAD,IAAU;AAC9C,QAAMC,sBAAsB,GAAG,YAAY;AACzCD,IAAAA,IAAI,CAACE,gBAAL,CAAsB,MAAML,8BAA8B,CAACG,IAAD,CAA1D;AACD,GAFD;;AAIA,QAAM;AACJG,IAAAA,MADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA,MAPI;AAQJC,IAAAA;AARI,MASFV,IATJ;AAWA,QAAMW,YAAY,GAAGjB,+BAA+B,CAACS,MAAD,EAASC,QAAT,CAApD;AAEA,QAAMQ,KAAK,GAAGH,MAAM,CAACI,UAArB;AAEA,QAAMC,UAAU,GAAGF,KAAK,CAACG,UAAN,CAAiB,IAAjB,EAAuB,CAAC,CAAxB,CAAnB;AACA,QAAMC,SAAS,GAAGV,MAAlB;AACA,QAAMW,QAAQ,GAAID,SAAS,GAAGF,UAAU,CAACT,KAAxB,GAAiCS,UAAU,CAACR,MAA7D;AACA,QAAMY,MAAM,GAAGN,KAAK,CAACG,UAAN,CAAiB,OAAjB,EAA0B,CAAC,CAA3B,CAAf;AACA,QAAMI,WAAW,GAAGd,KAApB;AACA,QAAMe,YAAY,GAAID,WAAW,GAAGD,MAAM,CAACZ,MAAtB,GAAgCY,MAAM,CAACb,KAA5D,CAzB8C,CA2B9C;AACA;AACA;;AAEA,QAAMgB,MAAM,GAAIC,KAAD,IAAW;AACxBd,IAAAA,KAAK,CAACe,aAAN,CAAoBhB,MAAM,CAACiB,QAA3B;AACAhB,IAAAA,KAAK,CAACiB,KAAN;AACAjB,IAAAA,KAAK,CAACkB,QAAN,CAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,CAApC;AACA/B,IAAAA,QAAQ,CAACa,KAAD,EAAQE,QAAR,EAAkB,CAAlB,EAAqB,CAArB,EAAwBL,KAAxB,EAA+BC,MAA/B,CAAR;AACAE,IAAAA,KAAK,CAACkB,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACAZ,IAAAA,UAAU,CAACa,IAAX,CAAgBnB,KAAhB,EAAuBH,KAAK,GAAG,CAAR,GAAYY,QAAQ,GAAG,CAA9C,EAAiD,CAAjD,EAAoDA,QAApD,EAA8DD,SAA9D;AACAE,IAAAA,MAAM,CAACS,IAAP,CACEnB,KADF,EAEEH,KAAK,GAAG,CAAR,GAAYc,WAAW,GAAG,CAF5B,EAGEb,MAAM,GAAG,CAHX,EAIEa,WAJF,EAKEC,YALF;AAOAZ,IAAAA,KAAK,CAACoB,GAAN;AACD,GAfD;;AAgBA,SAAO;AACLP,IAAAA,MADK;;AAELQ,IAAAA,OAAO,GAAG;AACRlB,MAAAA,YAAY,CAACmB,OAAb;AACD;;AAJI,GAAP;AAMD,CArDD;;AAuDA,eAAe/B,6BAAf","sourcesContent":["import { createViewportAwareInputHandler, fillRect, Vector2 } from \"gdxjs\";\r\nimport createInstructionScreen2System from \"./InstructionScreen2\";\r\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\r\n\r\nconst createInstructionScreenSystem = (Game) => {\r\n  const goToInstructionScreen2 = async () => {\r\n    Game.setCurrentScreen(await createInstructionScreen2System(Game));\r\n  };\r\n\r\n  const {\r\n    canvas,\r\n    viewport,\r\n    width,\r\n    height,\r\n    camera,\r\n    batch,\r\n    assets,\r\n    whiteTex,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.gameAssets;\r\n\r\n  const backGround = atlas.findRegion(\"BG\", -1);\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * backGround.width) / backGround.height;\r\n  const panel1 = atlas.findRegion(\"panel\", -1);\r\n  const PANEL_WIDTH = width;\r\n  const PANEL_HEIGHT = (PANEL_WIDTH * panel1.height) / panel1.width;\r\n\r\n  // inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n  //   goToInstructionScreen2();\r\n  // });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(0.039, 0.988, 0.114, 1);\r\n    fillRect(batch, whiteTex, 0, 0, width, height);\r\n    batch.setColor(1, 1, 1, 1);\r\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\r\n    panel1.draw(\r\n      batch,\r\n      width / 2 - PANEL_WIDTH / 2,\r\n      height / 3,\r\n      PANEL_WIDTH,\r\n      PANEL_HEIGHT\r\n    );\r\n    batch.end();\r\n  };\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}