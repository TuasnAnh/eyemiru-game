{"ast":null,"code":"const shuffle = array => {\n  array.sort(() => Math.random() - 0.5);\n};\n\nconst getDelayBaseOnDifficulty = difficulty => {\n  if (difficulty >= 1 && difficulty <= 3) {\n    return 2.5;\n  } else if (difficulty >= 4 && difficulty <= 6) {\n    return 2;\n  } else if (difficulty >= 7 && difficulty <= 9) {\n    return 1.5;\n  } else {\n    return 1;\n  }\n};\n\nconst getShootTypeBaseOnDifficulty = difficulty => {\n  if (difficulty >= 1 && difficulty <= 2) {\n    return {\n      minNumber: 0,\n      maxNumber: 2\n    };\n  } else if (difficulty >= 3 && difficulty <= 7) {\n    return {\n      minNumber: 0,\n      maxNumber: 3\n    };\n  } else {\n    return {\n      minNumber: 0,\n      maxNumber: 5\n    };\n  }\n};\n\nconst getPattern = (number, width, height) => {\n  let timer = 0;\n  let y = [];\n\n  if (number === 0) {\n    timer = [0];\n    yIndex = [width / 2];\n  }\n\n  return {\n    timer,\n    yIndex\n  };\n};\n\nconst createProductSpawnSystem = () => {\n  let delayTime = 2;\n  let pattern;\n  let timer = 0;\n  let index = 0;\n  let yIndex = 0;\n  return {\n    update(delta, worldState, {\n      width,\n      height\n    }) {\n      const {\n        difficulty,\n        products\n      } = worldState;\n      console.log(products);\n\n      if (worldState.stateTime > delayTime && pattern === undefined) {\n        if (Math.random() > 0.99) {// single product\n        } else {\n          const {\n            minNumber,\n            maxNumber\n          } = getShootTypeBaseOnDifficulty(difficulty); // pattern = getPattern(\n          //   Math.round(Math.random() * (maxNumber - minNumber) + minNumber),\n          //   width,\n          //   height\n          // );\n\n          pattern = getPattern(0, width, height);\n          timer = worldState.stateTime + pattern.timer[index];\n        }\n      }\n\n      if (worldState.stateTime > delayTime && worldState.stateTime > timer && pattern !== undefined) {\n        index = Math.min(index += 1, pattern.timer.length);\n        timer = worldState.stateTime + pattern.timer[index];\n        let loop = 1;\n        let tmpIndex = index - 1;\n\n        while (true) {\n          if (pattern.timer[tmpIndex] === pattern.timer[tmpIndex + 1] && tmpIndex < pattern.timer.length) {\n            tmpIndex = Math.min(tmpIndex += 1, pattern.timer.length);\n            loop += 1;\n          } else {\n            break;\n          }\n        } // add\n\n\n        for (let i = 0; i < loop; i++) {\n          if (i > 0) {\n            index = Math.min(index += 1, pattern.timer.length);\n          }\n\n          timer = worldState.stateTime + pattern.timer[index]; // get random product\n\n          let randomProduct = 0;\n          products.push({\n            stateTime: 0,\n            y: pattern.yIndex[yIndex],\n            type: randomProduct\n          });\n          yIndex = Math.min(yIndex += 1, pattern.yIndex.length - 1);\n        }\n\n        if (index === pattern.timer.length) {\n          delayTime = worldState.stateTime + getDelayBaseOnDifficulty(difficulty);\n          index = 0;\n          yIndex = 0;\n          pattern = undefined;\n        }\n      }\n    }\n\n  };\n};\n\nexport default createProductSpawnSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/ProductSpawnSystem.js"],"names":["shuffle","array","sort","Math","random","getDelayBaseOnDifficulty","difficulty","getShootTypeBaseOnDifficulty","minNumber","maxNumber","getPattern","number","width","height","timer","y","yIndex","createProductSpawnSystem","delayTime","pattern","index","update","delta","worldState","products","console","log","stateTime","undefined","min","length","loop","tmpIndex","i","randomProduct","push","type"],"mappings":"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","sourcesContent":["const shuffle = (array) => {\r\n  array.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nconst getDelayBaseOnDifficulty = (difficulty) => {\r\n  if (difficulty >= 1 && difficulty <= 3) {\r\n    return 2.5;\r\n  } else if (difficulty >= 4 && difficulty <= 6) {\r\n    return 2;\r\n  } else if (difficulty >= 7 && difficulty <= 9) {\r\n    return 1.5;\r\n  } else {\r\n    return 1;\r\n  }\r\n};\r\n\r\nconst getShootTypeBaseOnDifficulty = (difficulty) => {\r\n  if (difficulty >= 1 && difficulty <= 2) {\r\n    return { minNumber: 0, maxNumber: 2 };\r\n  } else if (difficulty >= 3 && difficulty <= 7) {\r\n    return { minNumber: 0, maxNumber: 3 };\r\n  } else {\r\n    return { minNumber: 0, maxNumber: 5 };\r\n  }\r\n};\r\n\r\nconst getPattern = (number, width, height) => {\r\n  let timer = 0;\r\n  let y = [];\r\n\r\n  if (number === 0) {\r\n    timer = [0];\r\n    yIndex = [width / 2];\r\n  }\r\n\r\n  return { timer, yIndex };\r\n};\r\n\r\nconst createProductSpawnSystem = () => {\r\n  let delayTime = 2;\r\n  let pattern;\r\n  let timer = 0;\r\n  let index = 0;\r\n  let yIndex = 0;\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      const { difficulty, products } = worldState;\r\n\r\n      console.log(products);\r\n      if (worldState.stateTime > delayTime && pattern === undefined) {\r\n        if (Math.random() > 0.99) {\r\n          // single product\r\n        } else {\r\n          const { minNumber, maxNumber } = getShootTypeBaseOnDifficulty(\r\n            difficulty\r\n          );\r\n          // pattern = getPattern(\r\n          //   Math.round(Math.random() * (maxNumber - minNumber) + minNumber),\r\n          //   width,\r\n          //   height\r\n          // );\r\n          pattern = getPattern(0, width, height);\r\n          timer = worldState.stateTime + pattern.timer[index];\r\n        }\r\n      }\r\n\r\n      if (\r\n        worldState.stateTime > delayTime &&\r\n        worldState.stateTime > timer &&\r\n        pattern !== undefined\r\n      ) {\r\n        index = Math.min((index += 1), pattern.timer.length);\r\n        timer = worldState.stateTime + pattern.timer[index];\r\n\r\n        let loop = 1;\r\n        let tmpIndex = index - 1;\r\n        while (true) {\r\n          if (\r\n            pattern.timer[tmpIndex] === pattern.timer[tmpIndex + 1] &&\r\n            tmpIndex < pattern.timer.length\r\n          ) {\r\n            tmpIndex = Math.min((tmpIndex += 1), pattern.timer.length);\r\n            loop += 1;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n\r\n        // add\r\n        for (let i = 0; i < loop; i++) {\r\n          if (i > 0) {\r\n            index = Math.min((index += 1), pattern.timer.length);\r\n          }\r\n          timer = worldState.stateTime + pattern.timer[index];\r\n          // get random product\r\n          let randomProduct = 0;\r\n          products.push({\r\n            stateTime: 0,\r\n            y: pattern.yIndex[yIndex],\r\n            type: randomProduct,\r\n          });\r\n\r\n          yIndex = Math.min((yIndex += 1), pattern.yIndex.length - 1);\r\n        }\r\n\r\n        if (index === pattern.timer.length) {\r\n          delayTime =\r\n            worldState.stateTime + getDelayBaseOnDifficulty(difficulty);\r\n          index = 0;\r\n          yIndex = 0;\r\n          pattern = undefined;\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createProductSpawnSystem;\r\n"]},"metadata":{},"sourceType":"module"}