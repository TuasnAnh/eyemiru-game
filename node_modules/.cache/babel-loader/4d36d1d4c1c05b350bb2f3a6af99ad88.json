{"ast":null,"code":"import { createViewportAwareInputHandler, fillRect } from \"gdxjs\";\nimport createGameScreenSystem from \"./GameScreen\";\n\nconst createInstructionScreen2System = Game => {\n  const goToGameScreen = async () => {\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\n  };\n\n  const {\n    canvas,\n    viewport,\n    width,\n    height,\n    camera,\n    batch,\n    assets,\n    whiteTex\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const atlas = assets.gameAssets;\n  const backGround = atlas.findRegion(\"BG\", -1);\n  const BG_HEIGHT = height;\n  const BG_WIDTH = BG_HEIGHT * backGround.width / backGround.height;\n  const panel2 = atlas.findRegion(\"panel2\", -1);\n  const PANEL_WIDTH = width * 0.78;\n  const PANEL_HEIGHT = PANEL_WIDTH * panel1.height / panel1.width;\n  const border = atlas.findRegion(\"border\", -1);\n  const B_HEIGHT = height;\n  const B_WIDTH = B_HEIGHT * border.width / border.height;\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\n    goToGameScreen();\n  });\n\n  const update = delta => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(0.039, 0.988, 0.114, 1);\n    fillRect(batch, whiteTex, 0, 0, width, height);\n    batch.setColor(1, 1, 1, 1);\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\n    panel2.draw(batch, width / 2 - PANEL_WIDTH / 2, (height - PANEL_HEIGHT) / 2, PANEL_WIDTH, PANEL_HEIGHT);\n    border.draw(batch, 0, 0, B_WIDTH, B_HEIGHT);\n    border.draw(batch, width - B_WIDTH, 0, B_WIDTH, B_HEIGHT);\n    batch.end();\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createInstructionScreen2System;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/InstructionScreen2.js"],"names":["createViewportAwareInputHandler","fillRect","createGameScreenSystem","createInstructionScreen2System","Game","goToGameScreen","setCurrentScreen","canvas","viewport","width","height","camera","batch","assets","whiteTex","inputHandler","atlas","gameAssets","backGround","findRegion","BG_HEIGHT","BG_WIDTH","panel2","PANEL_WIDTH","PANEL_HEIGHT","panel1","border","B_HEIGHT","B_WIDTH","addEventListener","x","y","update","delta","setProjection","combined","begin","setColor","draw","end","destroy","cleanup"],"mappings":"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","sourcesContent":["import { createViewportAwareInputHandler, fillRect } from \"gdxjs\";\r\nimport createGameScreenSystem from \"./GameScreen\";\r\n\r\nconst createInstructionScreen2System = (Game) => {\r\n  const goToGameScreen = async () => {\r\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\r\n  };\r\n\r\n  const {\r\n    canvas,\r\n    viewport,\r\n    width,\r\n    height,\r\n    camera,\r\n    batch,\r\n    assets,\r\n    whiteTex,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.gameAssets;\r\n\r\n  const backGround = atlas.findRegion(\"BG\", -1);\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * backGround.width) / backGround.height;\r\n  const panel2 = atlas.findRegion(\"panel2\", -1);\r\n  const PANEL_WIDTH = width * 0.78;\r\n  const PANEL_HEIGHT = (PANEL_WIDTH * panel1.height) / panel1.width;\r\n  const border = atlas.findRegion(\"border\", -1);\r\n  const B_HEIGHT = height;\r\n  const B_WIDTH = (B_HEIGHT * border.width) / border.height;\r\n\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    goToGameScreen();\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(0.039, 0.988, 0.114, 1);\r\n    fillRect(batch, whiteTex, 0, 0, width, height);\r\n    batch.setColor(1, 1, 1, 1);\r\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\r\n    panel2.draw(\r\n      batch,\r\n      width / 2 - PANEL_WIDTH / 2,\r\n      (height - PANEL_HEIGHT) / 2,\r\n      PANEL_WIDTH,\r\n      PANEL_HEIGHT\r\n    );\r\n    border.draw(batch, 0, 0, B_WIDTH, B_HEIGHT);\r\n    border.draw(batch, width - B_WIDTH, 0, B_WIDTH, B_HEIGHT);\r\n\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreen2System;\r\n"]},"metadata":{},"sourceType":"module"}