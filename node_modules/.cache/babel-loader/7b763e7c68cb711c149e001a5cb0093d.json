{"ast":null,"code":"import \"./index.css\";\nimport { createGameLoop, createBatch, loadTexture, loadAtlas, createViewport, fillRect } from \"gdxjs\";\nimport createWhiteText from \"gl-white-texture\";\nimport loadFontFile from \"./utils/loadFontFile\";\nimport createStartScreenSystem from \"./screens/StartScreen\";\n\nconst init = async () => {\n  const canvas = document.getElementById(\"main\");\n  const width = 47;\n  const height = 100;\n  const viewport = createViewport(canvas, width, height);\n  const camera = viewport.getCamera();\n  const gl = viewport.getContext();\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteText(gl);\n  const Game = {\n    score: 0,\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    viewport,\n\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n\n      Game.currentScreen = screen;\n    }\n\n  };\n  const foxLogo = await loadTexture(gl, \"./assets/logo.png\");\n  const LOGO_WIDTH = width / 1.8;\n  const LOGO_HEIGHT = LOGO_WIDTH * foxLogo.height / foxLogo.width;\n  let counter = 0;\n  const numOfAssets = 10;\n\n  const draw = () => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(255 / 255, 114 / 255, 22 / 255, 1);\n    fillRect(batch, whiteTex, 0, 0, width, height);\n    batch.setColor(1, 1, 1, 1);\n    fillRect(batch, foxLogo, width / 2 - LOGO_WIDTH / 2, height * 0.8 / 3, LOGO_WIDTH, LOGO_HEIGHT);\n    batch.setColor(1, 1, 1, 1);\n    fillRect(batch, whiteTex, width / 2 - width / (1.45 * 2), height * 2.5 / 4 - height / 50, width / 1.45, height / 25);\n    batch.setColor(255 / 255, 114 / 255, 22 / 255, 1);\n    fillRect(batch, whiteTex, width / 2 - width / 3, height * 2.5 / 4 - height / 60, width / 1.5, height / 30);\n    batch.setColor(1, 1, 1, 1);\n    let ratio = counter / numOfAssets;\n    fillRect(batch, whiteTex, width / 2 - width / (1.55 * 2), height * 2.5 / 4 - height / 80, width / 1.55 * ratio, height / 40);\n    batch.end();\n  };\n\n  const doAndCount = promise => promise.then(result => {\n    draw();\n    counter += 1;\n    return result;\n  });\n\n  const [gameAssets, animAssets, backGround, newAssets, foodInPot, startScreen, backGround2, leaderBoard, numberFont, textFont] = await Promise.all([doAndCount(loadAtlas(gl, \"./assets/food_catch.atlas\")), doAndCount(loadAtlas(gl, \"./assets/hotpot.atlas\")), doAndCount(loadTexture(gl, \"./assets/bg.jpg\")), doAndCount(loadAtlas(gl, \"./assets/hotpot-additional.atlas\")), doAndCount(loadAtlas(gl, \"./assets/foodinhotpot.atlas\")), doAndCount(loadAtlas(gl, \"./assets/start_menu.atlas\")), doAndCount(loadTexture(gl, \"./assets/bbg-start.jpg\")), doAndCount(loadAtlas(gl, \"./assets/leaderBoard.atlas\")), doAndCount(loadFontFile(gl, \"./fonts/iciel-64.fnt\")), doAndCount(loadFontFile(gl, \"./fonts/mijas.fnt\"))]);\n  let assets = {\n    gameAssets,\n    animAssets,\n    backGround,\n    newAssets,\n    foodInPot,\n    startScreen,\n    backGround2,\n    leaderBoard\n  };\n  Game.assets = assets;\n  Game.font = {\n    numberFont,\n    textFont\n  };\n  Game.setCurrentScreen(await createStartScreenSystem(Game));\n  gl.clearColor(255 / 255, 114 / 255, 22 / 255, 1);\n\n  const update = delta => {\n    console.log(\"dcm\");\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  createGameLoop(update);\n};\n\ninit();","map":{"version":3,"sources":["E:/game-project/eyemiru/src/index.js"],"names":["createGameLoop","createBatch","loadTexture","loadAtlas","createViewport","fillRect","createWhiteText","loadFontFile","createStartScreenSystem","init","canvas","document","getElementById","width","height","viewport","camera","getCamera","gl","getContext","batch","whiteTex","Game","score","setCurrentScreen","screen","currentScreen","destroy","foxLogo","LOGO_WIDTH","LOGO_HEIGHT","counter","numOfAssets","draw","setProjection","combined","begin","setColor","ratio","end","doAndCount","promise","then","result","gameAssets","animAssets","backGround","newAssets","foodInPot","startScreen","backGround2","leaderBoard","numberFont","textFont","Promise","all","assets","font","clearColor","update","delta","console","log","clear","COLOR_BUFFER_BIT"],"mappings":"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","sourcesContent":["import \"./index.css\";\nimport {\n  createGameLoop,\n  createBatch,\n  loadTexture,\n  loadAtlas,\n  createViewport,\n  fillRect,\n} from \"gdxjs\";\nimport createWhiteText from \"gl-white-texture\";\nimport loadFontFile from \"./utils/loadFontFile\";\n\nimport createStartScreenSystem from \"./screens/StartScreen\";\n\nconst init = async () => {\n  const canvas = document.getElementById(\"main\");\n  const width = 47;\n  const height = 100;\n  const viewport = createViewport(canvas, width, height);\n  const camera = viewport.getCamera();\n  const gl = viewport.getContext();\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteText(gl);\n\n  const Game = {\n    score: 0,\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    viewport,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    },\n  };\n\n  const foxLogo = await loadTexture(gl, \"./assets/logo.png\");\n  const LOGO_WIDTH = width / 1.8;\n  const LOGO_HEIGHT = (LOGO_WIDTH * foxLogo.height) / foxLogo.width;\n\n  let counter = 0;\n  const numOfAssets = 10;\n\n  const draw = () => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(255 / 255, 114 / 255, 22 / 255, 1);\n    fillRect(batch, whiteTex, 0, 0, width, height);\n    batch.setColor(1, 1, 1, 1);\n    fillRect(\n      batch,\n      foxLogo,\n      width / 2 - LOGO_WIDTH / 2,\n      (height * 0.8) / 3,\n      LOGO_WIDTH,\n      LOGO_HEIGHT\n    );\n    batch.setColor(1, 1, 1, 1);\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / (1.45 * 2),\n      (height * 2.5) / 4 - height / 50,\n      width / 1.45,\n      height / 25\n    );\n    batch.setColor(255 / 255, 114 / 255, 22 / 255, 1);\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / 3,\n      (height * 2.5) / 4 - height / 60,\n      width / 1.5,\n      height / 30\n    );\n    batch.setColor(1, 1, 1, 1);\n    let ratio = counter / numOfAssets;\n    fillRect(\n      batch,\n      whiteTex,\n      width / 2 - width / (1.55 * 2),\n      (height * 2.5) / 4 - height / 80,\n      (width / 1.55) * ratio,\n      height / 40\n    );\n    batch.end();\n  };\n\n  const doAndCount = (promise) =>\n    promise.then((result) => {\n      draw();\n      counter += 1;\n      return result;\n    });\n\n  const [\n    gameAssets,\n    animAssets,\n    backGround,\n    newAssets,\n    foodInPot,\n    startScreen,\n    backGround2,\n    leaderBoard,\n    numberFont,\n    textFont,\n  ] = await Promise.all([\n    doAndCount(loadAtlas(gl, \"./assets/food_catch.atlas\")),\n    doAndCount(loadAtlas(gl, \"./assets/hotpot.atlas\")),\n    doAndCount(loadTexture(gl, \"./assets/bg.jpg\")),\n    doAndCount(loadAtlas(gl, \"./assets/hotpot-additional.atlas\")),\n    doAndCount(loadAtlas(gl, \"./assets/foodinhotpot.atlas\")),\n    doAndCount(loadAtlas(gl, \"./assets/start_menu.atlas\")),\n    doAndCount(loadTexture(gl, \"./assets/bbg-start.jpg\")),\n    doAndCount(loadAtlas(gl, \"./assets/leaderBoard.atlas\")),\n    doAndCount(loadFontFile(gl, \"./fonts/iciel-64.fnt\")),\n    doAndCount(loadFontFile(gl, \"./fonts/mijas.fnt\")),\n  ]);\n\n  let assets = {\n    gameAssets,\n    animAssets,\n    backGround,\n    newAssets,\n    foodInPot,\n    startScreen,\n    backGround2,\n    leaderBoard,\n  };\n  Game.assets = assets;\n\n  Game.font = { numberFont, textFont };\n  Game.setCurrentScreen(await createStartScreenSystem(Game));\n\n  gl.clearColor(255 / 255, 114 / 255, 22 / 255, 1);\n  const update = (delta) => {\n    console.log(\"dcm\");\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  createGameLoop(update);\n};\n\ninit();\n"]},"metadata":{},"sourceType":"module"}