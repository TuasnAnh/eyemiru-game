{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\game-project\\\\eyemiru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"E:\\\\game-project\\\\eyemiru\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{createViewportAwareInputHandler,fillRect}from\"gdxjs\";import createGameScreenSystem from\"./GameScreen\";var createInstructionScreen2System=function createInstructionScreen2System(Game){var goToGameScreen=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=Game;_context.next=3;return createGameScreenSystem(Game);case 3:_context.t1=_context.sent;_context.t0.setCurrentScreen.call(_context.t0,_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function goToGameScreen(){return _ref.apply(this,arguments);};}();var canvas=Game.canvas,viewport=Game.viewport,width=Game.width,height=Game.height,camera=Game.camera,batch=Game.batch,assets=Game.assets,whiteTex=Game.whiteTex;var inputHandler=createViewportAwareInputHandler(canvas,viewport);var atlas=assets.gameAssets;var backGround=atlas.findRegion(\"BG\",-1);var BG_HEIGHT=height;var BG_WIDTH=BG_HEIGHT*backGround.width/backGround.height;var panel2=atlas.findRegion(\"panel2\",-1);var PANEL_WIDTH=width*0.78;var PANEL_HEIGHT=PANEL_WIDTH*panel2.height/panel2.width;var border=atlas.findRegion(\"border\",-1);var B_HEIGHT=height;var B_WIDTH=B_HEIGHT*border.width/border.height;inputHandler.addEventListener(\"touchStart\",function(x,y){goToGameScreen();});var update=function update(delta){batch.setProjection(camera.combined);batch.begin();batch.setColor(0.039,0.988,0.114,1);fillRect(batch,whiteTex,0,0,width,height);batch.setColor(1,1,1,1);backGround.draw(batch,width/2-BG_WIDTH/2,0,BG_WIDTH,BG_HEIGHT);panel2.draw(batch,width/2-PANEL_WIDTH/2,(height-PANEL_HEIGHT)/2,PANEL_WIDTH,PANEL_HEIGHT);border.draw(batch,0,0,B_WIDTH,B_HEIGHT);border.draw(batch,width-B_WIDTH,0,B_WIDTH,B_HEIGHT);batch.end();};return{update:update,destroy:function destroy(){inputHandler.cleanup();}};};export default createInstructionScreen2System;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/InstructionScreen2.js"],"names":["createViewportAwareInputHandler","fillRect","createGameScreenSystem","createInstructionScreen2System","Game","goToGameScreen","setCurrentScreen","canvas","viewport","width","height","camera","batch","assets","whiteTex","inputHandler","atlas","gameAssets","backGround","findRegion","BG_HEIGHT","BG_WIDTH","panel2","PANEL_WIDTH","PANEL_HEIGHT","border","B_HEIGHT","B_WIDTH","addEventListener","x","y","update","delta","setProjection","combined","begin","setColor","draw","end","destroy","cleanup"],"mappings":"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","sourcesContent":["import { createViewportAwareInputHandler, fillRect } from \"gdxjs\";\r\nimport createGameScreenSystem from \"./GameScreen\";\r\n\r\nconst createInstructionScreen2System = (Game) => {\r\n  const goToGameScreen = async () => {\r\n    Game.setCurrentScreen(await createGameScreenSystem(Game));\r\n  };\r\n\r\n  const {\r\n    canvas,\r\n    viewport,\r\n    width,\r\n    height,\r\n    camera,\r\n    batch,\r\n    assets,\r\n    whiteTex,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const atlas = assets.gameAssets;\r\n\r\n  const backGround = atlas.findRegion(\"BG\", -1);\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * backGround.width) / backGround.height;\r\n  const panel2 = atlas.findRegion(\"panel2\", -1);\r\n  const PANEL_WIDTH = width * 0.78;\r\n  const PANEL_HEIGHT = (PANEL_WIDTH * panel2.height) / panel2.width;\r\n  const border = atlas.findRegion(\"border\", -1);\r\n  const B_HEIGHT = height;\r\n  const B_WIDTH = (B_HEIGHT * border.width) / border.height;\r\n\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    goToGameScreen();\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(0.039, 0.988, 0.114, 1);\r\n    fillRect(batch, whiteTex, 0, 0, width, height);\r\n    batch.setColor(1, 1, 1, 1);\r\n    backGround.draw(batch, width / 2 - BG_WIDTH / 2, 0, BG_WIDTH, BG_HEIGHT);\r\n    panel2.draw(\r\n      batch,\r\n      width / 2 - PANEL_WIDTH / 2,\r\n      (height - PANEL_HEIGHT) / 2,\r\n      PANEL_WIDTH,\r\n      PANEL_HEIGHT\r\n    );\r\n    border.draw(batch, 0, 0, B_WIDTH, B_HEIGHT);\r\n    border.draw(batch, width - B_WIDTH, 0, B_WIDTH, B_HEIGHT);\r\n\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createInstructionScreen2System;\r\n"]},"metadata":{},"sourceType":"module"}