{"ast":null,"code":"// import ReactDOM from \"react-dom\";\n// import React from \"react\";\n// import LeaderBoard from \"../LeaderBoard\";\n// import axios from \"../../utils/axios\";\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\nimport createWorld from \"../utils/createWorld\";\nimport { getProductInBasketTex, getProductTexture, getFakeProductTex } from \"../utils/getProduct\";\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\nimport createBackGroundRenderSystem from \"../systems/BgRenderSystem\";\nimport createBasketRenderSystem from \"../systems/BasketRenderSystem\";\nimport createInputHandlerGameScreenSystem from \"../systems/InputHandlerGameScreenSystem\";\nimport createBasketPositionSystem from \"../systems/BasketPositionSystem\";\nimport createProductSpawnSystem from \"./ProductSpawnSystem\";\nimport createProductPositionSystem from \"./ProductPositionSystem\";\nimport createProductRenderSystem from \"./ProductRenderSystem\";\n\nconst createGameScreenSystem = Game => {\n  const {\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    assets,\n    viewport\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const TRAY_INITIAL_Y = height * 3.65 / 4;\n  const BASKET_WIDTH = width / 3.8;\n  const productTex = getProductTexture(assets.gameAssets);\n  const fakeProductTex = getFakeProductTex(assets.gameAssets);\n  const productInBasketTex = getProductInBasketTex(assets.gameAssets);\n  const worldState = {\n    score: 0,\n    // keep\n    correctCatch: false,\n    // keep\n    stateTime: 0,\n    // keep\n    gameOver: false,\n    // keep\n    emptyLife: false,\n    // keep\n    life: [{\n      open: true\n    }, {\n      open: true\n    }, {\n      open: true\n    }],\n    // keep\n    lifeIndex: 2,\n    // life checking index // keep\n    basketState: {\n      x: width / 2,\n      y: TRAY_INITIAL_Y,\n      width: BASKET_WIDTH,\n      position: new Vector2(width / 2, TRAY_INITIAL_Y),\n      target: new Vector2(width / 2, TRAY_INITIAL_Y),\n      speed: width * 2.5\n    },\n    difficulty: 1,\n    // keep\n    collection: [],\n    // keep\n    collectionFinished: [],\n    // keep\n    products: [],\n    // keep\n    productInfos: {\n      accY: height / 2\n    },\n    whiteSmokeList: [],\n    redSmokeList: []\n  };\n  const extra = {\n    canvas,\n    width,\n    height,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    inputHandler,\n    assets,\n    productTex,\n    fakeProductTex,\n    productInBasketTex\n  };\n  const world = createWorld(worldState, extra);\n  world.addSystem(createInputHandlerGameScreenSystem());\n  world.addSystem(createBasketPositionSystem());\n  world.addSystem(createProductSpawnSystem());\n  world.addSystem(createProductPositionSystem());\n  world.addSystem(createBackGroundRenderSystem());\n  world.addSystem(createBasketRenderSystem());\n  world.addSystem(createProductRenderSystem());\n\n  const goToLeaderBoardScreen = async () => {\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\n  };\n\n  const update = delta => {\n    if (!worldState.gameOver) {\n      worldState.stateTime += delta;\n      world.update(delta);\n    } else {\n      // world.update(delta, true);\n      goToLeaderBoardScreen();\n    }\n  };\n\n  return {\n    update,\n\n    destroy() {\n      inputHandler.cleanup();\n    }\n\n  };\n};\n\nexport default createGameScreenSystem;","map":{"version":3,"sources":["E:/game-project/eyemiru/src/screens/GameScreen.js"],"names":["createViewportAwareInputHandler","Vector2","createWorld","getProductInBasketTex","getProductTexture","getFakeProductTex","createLeaderBoardSystem","createBackGroundRenderSystem","createBasketRenderSystem","createInputHandlerGameScreenSystem","createBasketPositionSystem","createProductSpawnSystem","createProductPositionSystem","createProductRenderSystem","createGameScreenSystem","Game","width","height","canvas","gl","batch","camera","whiteTex","assets","viewport","inputHandler","TRAY_INITIAL_Y","BASKET_WIDTH","productTex","gameAssets","fakeProductTex","productInBasketTex","worldState","score","correctCatch","stateTime","gameOver","emptyLife","life","open","lifeIndex","basketState","x","y","position","target","speed","difficulty","collection","collectionFinished","products","productInfos","accY","whiteSmokeList","redSmokeList","extra","world","addSystem","goToLeaderBoardScreen","setCurrentScreen","update","delta","destroy","cleanup"],"mappings":"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","sourcesContent":["// import ReactDOM from \"react-dom\";\r\n// import React from \"react\";\r\n// import LeaderBoard from \"../LeaderBoard\";\r\n// import axios from \"../../utils/axios\";\r\n\r\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\r\nimport createWorld from \"../utils/createWorld\";\r\nimport {\r\n  getProductInBasketTex,\r\n  getProductTexture,\r\n  getFakeProductTex,\r\n} from \"../utils/getProduct\";\r\nimport createLeaderBoardSystem from \"./LeaderBoardScreen\";\r\nimport createBackGroundRenderSystem from \"../systems/BgRenderSystem\";\r\nimport createBasketRenderSystem from \"../systems/BasketRenderSystem\";\r\nimport createInputHandlerGameScreenSystem from \"../systems/InputHandlerGameScreenSystem\";\r\nimport createBasketPositionSystem from \"../systems/BasketPositionSystem\";\r\nimport createProductSpawnSystem from \"./ProductSpawnSystem\";\r\nimport createProductPositionSystem from \"./ProductPositionSystem\";\r\nimport createProductRenderSystem from \"./ProductRenderSystem\";\r\n\r\nconst createGameScreenSystem = (Game) => {\r\n  const {\r\n    width,\r\n    height,\r\n    canvas,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    assets,\r\n    viewport,\r\n  } = Game;\r\n\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n  const TRAY_INITIAL_Y = (height * 3.65) / 4;\r\n\r\n  const BASKET_WIDTH = width / 3.8;\r\n\r\n  const productTex = getProductTexture(assets.gameAssets);\r\n  const fakeProductTex = getFakeProductTex(assets.gameAssets);\r\n  const productInBasketTex = getProductInBasketTex(assets.gameAssets);\r\n\r\n  const worldState = {\r\n    score: 0, // keep\r\n    correctCatch: false, // keep\r\n    stateTime: 0, // keep\r\n    gameOver: false, // keep\r\n    emptyLife: false, // keep\r\n    life: [{ open: true }, { open: true }, { open: true }], // keep\r\n    lifeIndex: 2, // life checking index // keep\r\n    basketState: {\r\n      x: width / 2,\r\n      y: TRAY_INITIAL_Y,\r\n      width: BASKET_WIDTH,\r\n      position: new Vector2(width / 2, TRAY_INITIAL_Y),\r\n      target: new Vector2(width / 2, TRAY_INITIAL_Y),\r\n      speed: width * 2.5,\r\n    },\r\n    difficulty: 1, // keep\r\n    collection: [], // keep\r\n    collectionFinished: [], // keep\r\n    products: [], // keep\r\n    productInfos: {\r\n      accY: height / 2,\r\n    },\r\n    whiteSmokeList: [],\r\n    redSmokeList: [],\r\n  };\r\n\r\n  const extra = {\r\n    canvas,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    inputHandler,\r\n    assets,\r\n    productTex,\r\n    fakeProductTex,\r\n    productInBasketTex,\r\n  };\r\n  const world = createWorld(worldState, extra);\r\n\r\n  world.addSystem(createInputHandlerGameScreenSystem());\r\n  world.addSystem(createBasketPositionSystem());\r\n  world.addSystem(createProductSpawnSystem());\r\n  world.addSystem(createProductPositionSystem());\r\n\r\n  world.addSystem(createBackGroundRenderSystem());\r\n  world.addSystem(createBasketRenderSystem());\r\n  world.addSystem(createProductRenderSystem());\r\n\r\n  const goToLeaderBoardScreen = async () => {\r\n    Game.setCurrentScreen(await createLeaderBoardSystem(Game));\r\n  };\r\n\r\n  const update = (delta) => {\r\n    if (!worldState.gameOver) {\r\n      worldState.stateTime += delta;\r\n      world.update(delta);\r\n    } else {\r\n      // world.update(delta, true);\r\n      goToLeaderBoardScreen();\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createGameScreenSystem;\r\n"]},"metadata":{},"sourceType":"module"}